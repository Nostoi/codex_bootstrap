# Additional security headers and configurations
# This file is included in the main Nginx configuration

# Security headers (enhanced)
add_header X-Frame-Options "DENY" always;
add_header X-Content-Type-Options "nosniff" always;
add_header X-XSS-Protection "1; mode=block" always;
add_header Referrer-Policy "strict-origin-when-cross-origin" always;
add_header X-Permitted-Cross-Domain-Policies "none" always;
add_header X-Download-Options "noopen" always;
add_header X-DNS-Prefetch-Control "off" always;

# Content Security Policy (strict but functional for modern web apps)
add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com data:; img-src 'self' data: https: blob:; connect-src 'self' ws: wss:; media-src 'self'; object-src 'none'; child-src 'none'; frame-src 'none'; worker-src 'self'; frame-ancestors 'none'; base-uri 'self'; form-action 'self';" always;

# HTTP Strict Transport Security (HSTS) - only for HTTPS
add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

# Permissions Policy (Feature Policy replacement)
add_header Permissions-Policy "camera=(), microphone=(), geolocation=(), payment=(), usb=(), accelerometer=(), gyroscope=(), magnetometer=(), fullscreen=(self), autoplay=(), encrypted-media=(), picture-in-picture=()" always;

# Clear potentially sensitive headers
more_clear_headers "X-Powered-By";
more_clear_headers "Server";
more_set_headers "Server: Codex-Bootstrap/1.0";

# Security-related variables
set $block_sql_injections 0;
set $block_file_injections 0;
set $block_common_exploits 0;
set $block_spam 0;

# SQL injection detection
if ($query_string ~ "union.*select.*\(") {
    set $block_sql_injections 1;
}
if ($query_string ~ "union.*all.*select") {
    set $block_sql_injections 1;
}
if ($query_string ~ "concat.*\(") {
    set $block_sql_injections 1;
}

# File injection detection
if ($query_string ~ "\.\.\/") {
    set $block_file_injections 1;
}
if ($query_string ~ "\.(bash|git|hg|log|svn|swp|cvs)") {
    set $block_file_injections 1;
}
if ($query_string ~ "etc\/passwd") {
    set $block_file_injections 1;
}

# Common exploit detection
if ($query_string ~ "(<|%3C).*script.*(>|%3E)") {
    set $block_common_exploits 1;
}
if ($query_string ~ "GLOBALS(=|\[|\%[0-9A-Z]{0,2})") {
    set $block_common_exploits 1;
}
if ($query_string ~ "_REQUEST(=|\[|\%[0-9A-Z]{0,2})") {
    set $block_common_exploits 1;
}

# Spam detection
if ($query_string ~ "(\b|%20)(free|porn|sex|casino|viagra)(\b|%20)") {
    set $block_spam 1;
}

# Block requests based on detection
if ($block_sql_injections) {
    return 403;
}
if ($block_file_injections) {
    return 403;
}
if ($block_common_exploits) {
    return 403;
}
if ($block_spam) {
    return 403;
}

# Additional security measures
# Block requests with no User-Agent
if ($http_user_agent = "") {
    return 403;
}

# Block requests with suspicious User-Agents
if ($http_user_agent ~* "(bot|crawler|spider|scraping|facebook|whatsapp)" ) {
    set $suspicious_ua 1;
}

# Log suspicious activity (but don't block bots entirely in case of legitimate crawlers)
if ($suspicious_ua) {
    access_log /var/log/nginx/suspicious.log security;
}
