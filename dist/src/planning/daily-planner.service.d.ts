import { PrismaService } from "../prisma/prisma.service";
import { TasksService } from "../tasks/tasks.service";
import { GoogleService } from "../integrations/google/google.service";
import { Task } from "@prisma/client";
import { DependencyResolutionResult } from "./types";
import { DailyPlanResponseDto } from "./dto";
export declare class DailyPlannerService {
    private prisma;
    private tasksService;
    private googleService;
    private readonly logger;
    constructor(prisma: PrismaService, tasksService: TasksService, googleService: GoogleService);
    generatePlan(userId: string, date: Date): Promise<DailyPlanResponseDto>;
    private gatherPlanningData;
    private filterReadyTasks;
    private buildDependencyGraph;
    private detectCircularDependencies;
    resolveTaskDependencies(tasks: Task[]): Promise<DependencyResolutionResult>;
    private getTaskBlockingReasons;
    private handleCircularDependencyError;
    private scoreTasks;
    private calculateTaskScore;
    private generateTimeSlots;
    private parseWorkTime;
    private calculateBreakDuration;
    private getEnhancedEnergyLevelForTime;
    private getOptimizedFocusTypes;
    private adjustEnergyForEarlyMorning;
    private adjustEnergyForPostLunch;
    private decreaseEnergyLevel;
    private getEnergyLevelForTime;
    private getPreferredFocusTypes;
    private hasConflictWithCommitments;
    private getWorkingHours;
    private assignTasksToSlots;
    private findBestSlotForTask;
    private calculateEnergyMatch;
    private calculateFocusMatch;
    private calculateDurationFit;
    private generateSchedulingReasoning;
    private createScheduleBlocks;
    private calculateOptimizationMetrics;
    private transformToDto;
    private getExistingCommitments;
    private getCalendarEventsWithRetry;
    private categorizeCalendarError;
    private calculateRetryDelay;
    private sleep;
    private parseCalendarEventToTimeSlot;
    private inferEnergyLevel;
    private inferPreferredFocusTypes;
}
