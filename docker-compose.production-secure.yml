# Production-Hardened Docker Compose Configuration
# Enhanced security configuration for Codex Bootstrap

version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      args:
        - NODE_ENV=production
    environment:
      - NODE_ENV=production
      - PORT=8000
      - WEBSOCKET_PORT=8001
      - CORS_ORIGIN=https://your-domain.com
      # Feature flags for production
      - FF_ENHANCED_TASK_METADATA=true
      - FF_AI_TASK_EXTRACTION=true
      - FF_DAILY_PLANNING=false
      - FF_MEM0_INTEGRATION=false
      - FF_ADVANCED_AI_FEATURES=false
    volumes:
      # Read-only configuration
      - ./backend/.env.production:/app/.env:ro
      # Temporary directories with security restrictions
      - type: tmpfs
        target: /tmp
        tmpfs:
          size: 100m
          mode: 1777
          noexec: true
          nosuid: true
      - type: tmpfs
        target: /var/tmp
        tmpfs:
          size: 50m
          mode: 1777
          noexec: true
          nosuid: true
    restart: always
    # Security configurations
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    read_only: false  # Will enable after testing
    user: "1001:1001"  # nestjs:nodejs
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    networks:
      - secure_backend
    # Health checks
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=backend,environment=production"

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        - NODE_ENV=production
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:8000
      - NEXT_PUBLIC_APP_VERSION=0.1.0
      - NEXT_TELEMETRY_DISABLED=1
    volumes:
      # Temporary directories with security restrictions
      - type: tmpfs
        target: /tmp
        tmpfs:
          size: 50m
          mode: 1777
          noexec: true
          nosuid: true
    restart: always
    # Security configurations
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    read_only: false  # Will enable after testing
    user: "1001:1001"  # nextjs:nodejs
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    networks:
      - secure_backend
      - secure_frontend
    # Health checks
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=frontend,environment=production"

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=helmsman_production
      - POSTGRES_USER_FILE=/run/secrets/db_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
    volumes:
      - postgres_production_data:/var/lib/postgresql/data
      # Temporary directory with restrictions
      - type: tmpfs
        target: /tmp
        tmpfs:
          size: 100m
          noexec: true
          nosuid: true
    restart: always
    # Security configurations
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - SETGID
      - SETUID
    read_only: false  # PostgreSQL needs write access to data directory
    # Use non-root user (postgres user in the image)
    user: "999:999"  # postgres:postgres
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    networks:
      - secure_backend
    # Health checks
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    # Secrets management
    secrets:
      - db_user
      - db_password
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=database,environment=production"

  # Nginx reverse proxy with security headers
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/security.conf:/etc/nginx/conf.d/security.conf:ro
      - ./certs:/etc/nginx/certs:ro
    restart: always
    # Security configurations
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
      - NET_BIND_SERVICE
    read_only: true
    user: "101:101"  # nginx:nginx
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    networks:
      - secure_frontend
    # Health checks
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=nginx,environment=production"

  # Security monitoring with Falco
  falco:
    image: falcosecurity/falco:latest
    privileged: true
    volumes:
      - /var/run/docker.sock:/host/var/run/docker.sock
      - /dev:/host/dev
      - /proc:/host/proc:ro
      - /boot:/host/boot:ro
      - /lib/modules:/host/lib/modules:ro
      - /usr:/host/usr:ro
      - /etc:/host/etc:ro
      - ./falco/falco.yaml:/etc/falco/falco.yaml:ro
    restart: always
    networks:
      - monitoring
    # Security configurations
    security_opt:
      - apparmor:unconfined  # Falco needs broader access
    # Health checks
    healthcheck:
      test: ["CMD", "pgrep", "falco"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=falco,environment=production"

# Networks with proper isolation
networks:
  secure_backend:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: secure_backend
    ipam:
      config:
        - subnet: 172.20.0.0/16
          ip_range: 172.20.240.0/20
  secure_frontend:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: secure_frontend
    ipam:
      config:
        - subnet: 172.21.0.0/16
          ip_range: 172.21.240.0/20
  monitoring:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: monitoring

# Secrets management
secrets:
  db_user:
    file: ./secrets/db_user.txt
  db_password:
    file: ./secrets/db_password.txt

# Persistent volumes
volumes:
  postgres_production_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/docker/volumes/postgres_production_data
