{
  "projects": [
    {
      "id": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "name": "Helmsman AI-Augmented Task Management",
      "description": "Transform the basic task management system into a sophisticated AI-powered personal command center with energy-aware scheduling, intelligent task extraction, dependency management, and contextual assistance. Implements the complete Helmsman specification with enhanced Prisma schema, OpenAI integration, daily planning algorithm, and accessibility-compliant UI components.",
      "createdAt": "2025-07-27T21:37:55.310Z",
      "updatedAt": "2025-07-27T21:37:55.310Z"
    }
  ],
  "tasks": [
    {
      "id": "5398815a-4387-4489-bd7a-193ffd100aab",
      "name": "Enhance Prisma schema with Helmsman metadata fields",
      "details": "Update the existing Prisma schema to support all Helmsman specification requirements including energy levels, focus types, task priorities, deadlines, dependencies, and user settings. This foundational change enables intelligent scheduling and AI-powered task management.\n\nFiles to modify:\n- backend/prisma/schema.prisma: Add new enums (EnergyLevel, FocusType, TaskSource), extend Task model with metadata fields, create UserSettings model, add InteractionLog model for Mem0 integration\n- backend/src/tasks/dto/: Create new DTOs for enhanced task creation/updates with metadata validation\n- backend/src/users/dto/: Add UserSettings DTOs for energy patterns and preferences\n\nKey schema additions:\n- Task.energyLevel (enum: LOW, MEDIUM, HIGH)\n- Task.focusType (enum: CREATIVE, TECHNICAL, ADMINISTRATIVE, SOCIAL) \n- Task.estimatedMinutes (integer, nullable)\n- Task.priority (integer 1-5, default 3)\n- Task.softDeadline and Task.hardDeadline (DateTime, nullable)\n- Task.source (enum: SELF, BOSS, TEAM, AI_GENERATED)\n- Task.aiSuggestion (text, nullable)\n- UserSettings model with morningEnergyLevel, afternoonEnergyLevel, preferredWorkHours\n- InteractionLog model for Mem0 context storage\n\nMigration strategy: Add fields as nullable first, backfill with defaults, then apply constraints. This ensures zero-downtime deployment while maintaining data integrity for existing tasks.",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "completed": true,
      "createdAt": "2025-07-27T21:38:10.884Z",
      "updatedAt": "2025-07-28T03:11:06.759Z",
      "dependsOn": [],
      "priority": 10,
      "complexity": 6,
      "status": "done",
      "tags": [
        "schema",
        "prisma",
        "migration",
        "energy:medium",
        "focus:technical",
        "source:system"
      ],
      "estimatedHours": 6,
      "level": 0
    },
    {
      "id": "2bf83d50-8d46-4485-a29c-082430b44a1c",
      "name": "Add nullable metadata columns to Task model",
      "details": "Create Prisma migration files to add new enum types and nullable columns to the tasks table. This is the first phase of the schema enhancement that ensures zero-downtime deployment.\n\nAdd the following enums to schema.prisma:\n- EnergyLevel: LOW, MEDIUM, HIGH\n- FocusType: CREATIVE, TECHNICAL, ADMINISTRATIVE, SOCIAL  \n- TaskSource: SELF, BOSS, TEAM, AI_GENERATED\n\nAdd nullable columns to Task model:\n- energyLevel EnergyLevel?\n- focusType FocusType?\n- estimatedMinutes Int?\n- priority Int? @default(3)\n- softDeadline DateTime?\n- hardDeadline DateTime?\n- source TaskSource? @default(SELF)\n- aiSuggestion String?\n\nGenerate migration with: npx prisma migrate dev --name add_task_metadata_fields\nTest migration runs cleanly on existing data without errors or data loss.",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "parentId": "5398815a-4387-4489-bd7a-193ffd100aab",
      "completed": true,
      "createdAt": "2025-07-27T21:38:20.800Z",
      "updatedAt": "2025-07-28T19:56:05.879Z",
      "priority": 5,
      "complexity": 3,
      "status": "done",
      "level": 1
    },
    {
      "id": "f2683569-684f-4508-bcdd-1f70b0db9020",
      "name": "Create UserSettings and InteractionLog models",
      "details": "Create UserSettings and InteractionLog models in Prisma schema to support user energy patterns and Mem0 integration.\n\nUserSettings model: userId, morningEnergyLevel, afternoonEnergyLevel, preferredWorkHours, focusSessionLength, workStartTime, workEndTime, timestamps.\n\nInteractionLog model: id, userId, interactionType, input, output, metadata Json, timestamp for Mem0 semantic memory.\n\nGenerate migration: npx prisma migrate dev --name add_user_settings_and_interaction_logs\nTest both models can be created and queried without foreign key constraint issues.",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "parentId": "5398815a-4387-4489-bd7a-193ffd100aab",
      "completed": true,
      "createdAt": "2025-07-27T21:38:42.020Z",
      "updatedAt": "2025-07-28T19:56:12.015Z",
      "priority": 5,
      "complexity": 3,
      "status": "done",
      "level": 1
    },
    {
      "id": "4c2e8aa0-6bfc-418b-b32b-ea44537f7532",
      "name": "Update TypeScript DTOs for enhanced schema",
      "details": "Update TypeScript interfaces and DTOs to match the enhanced Prisma schema. This ensures type safety throughout the application.\n\nFiles to update:\n- backend/src/tasks/dto/create-task.dto.ts: Add optional energyLevel, focusType, estimatedMinutes, priority, deadlines, source\n- backend/src/tasks/dto/update-task.dto.ts: Add same optional fields as create\n- backend/src/users/dto/: Create user-settings.dto.ts with UserSettings interface\n- Any existing Task interfaces in frontend/src/types/ or shared types\n\nAdd validation decorators (@IsEnum, @IsOptional, @IsInt, @IsDateString) to ensure data integrity.\nGenerate fresh Prisma client types and verify no TypeScript compilation errors.",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "parentId": "5398815a-4387-4489-bd7a-193ffd100aab",
      "completed": true,
      "createdAt": "2025-07-27T21:38:51.624Z",
      "updatedAt": "2025-07-28T19:56:18.483Z",
      "priority": 5,
      "complexity": 3,
      "status": "done",
      "level": 1
    },
    {
      "id": "133889ac-4e92-48b4-8706-65ef1954fada",
      "name": "Create data migration to backfill task metadata",
      "details": "Create safe data migration scripts to backfill existing tasks with sensible defaults for the new metadata fields. This ensures all existing user data remains functional while gaining the benefits of enhanced scheduling.\n\nCreate backfill script in backend/prisma/scripts/backfill-task-metadata.ts:\n- Set energyLevel = MEDIUM for all existing tasks (safe neutral default)\n- Set focusType = ADMINISTRATIVE for existing tasks (conservative default)\n- Set priority = 3 for all existing tasks (middle priority)\n- Set source = SELF for all existing tasks (user-created assumption)\n- Leave deadlines and aiSuggestion as null (no assumptions about timing)\n- Preserve all existing task data (title, description, completed, dueDate, etc.)\n\nVerification steps:\n- Count tasks before/after migration to ensure no data loss\n- Verify all non-nullable fields have values\n- Test that existing API endpoints continue to work\n- Create rollback script to remove new fields if needed\n\nRun backfill after schema migration but before applying NOT NULL constraints. Include comprehensive logging and progress tracking for large datasets.",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "completed": true,
      "createdAt": "2025-07-27T21:39:06.498Z",
      "updatedAt": "2025-07-28T03:26:07.867Z",
      "dependsOn": [
        "5398815a-4387-4489-bd7a-193ffd100aab"
      ],
      "priority": 9,
      "complexity": 4,
      "status": "done",
      "tags": [
        "migration",
        "db",
        "data",
        "energy:low",
        "focus:technical",
        "source:system"
      ],
      "estimatedHours": 4,
      "level": 0,
      "actualHours": 2
    },
    {
      "id": "ff2682c3-caac-46ed-8026-f2bd4c7b7d77",
      "name": "Implement OpenAI service wrapper with JSON schemas",
      "details": "Implement a production-ready OpenAI service wrapper that handles task extraction, classification, and contextual responses with proper error handling, rate limiting, and validation.\n\nCreate backend/src/ai/openai.service.ts with:\n- OpenAI client configuration with API key management\n- Task extraction method with structured JSON schema validation\n- Task classification method for metadata prediction\n- Error handling with exponential backoff and circuit breaker pattern\n- Request/response logging for debugging and monitoring\n- Cost tracking and rate limiting to prevent API abuse\n\nJSON schemas for structured outputs:\n- TaskExtractionSchema: array of tasks with title, description, metadata predictions\n- TaskClassificationSchema: energyLevel, focusType, estimatedMinutes, priority predictions\n- Validation and repair logic for malformed AI responses\n\nIntegration points:\n- POST /api/ai/extract-tasks endpoint\n- POST /api/ai/classify-task endpoint  \n- Error fallbacks to simple defaults when AI fails\n- Metrics collection for accuracy tracking\n\nEnvironment variables: OPENAI_API_KEY, OPENAI_MODEL (default: gpt-4), OPENAI_MAX_TOKENS\nInclude comprehensive unit tests with mocked OpenAI responses and error scenarios.",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "completed": false,
      "createdAt": "2025-07-27T21:39:19.491Z",
      "updatedAt": "2025-07-28T07:36:09.007Z",
      "dependsOn": [],
      "priority": 8,
      "complexity": 7,
      "status": "done",
      "tags": [
        "ai",
        "openai",
        "api",
        "energy:high",
        "focus:technical",
        "source:system"
      ],
      "estimatedHours": 8,
      "level": 0,
      "actualHours": 2
    },
    {
      "id": "a4cef2af-c0a7-43d3-a78e-e440f20bd201",
      "name": "Create OpenAI service class with error handling",
      "details": "Create the core OpenAI service class with proper configuration, error handling, and logging. This is the foundation for all AI functionality.\n\nImplement in backend/src/ai/openai.service.ts:\n- Injectable class with OpenAI client instance\n- Configuration from environment variables\n- Rate limiting with token bucket algorithm\n- Circuit breaker pattern for API failures\n- Request/response logging with sanitized data\n- Cost tracking per request\n- Health check method for service monitoring\n\nInclude proper TypeScript types, error classes, and dependency injection setup for NestJS.",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "parentId": "ff2682c3-caac-46ed-8026-f2bd4c7b7d77",
      "completed": true,
      "createdAt": "2025-07-27T21:39:28.474Z",
      "updatedAt": "2025-07-28T21:31:30.462Z",
      "priority": 5,
      "complexity": 3,
      "status": "done",
      "level": 1,
      "actualHours": 2
    },
    {
      "id": "970dd791-0367-4e58-8f4c-0cf4a9563c8f",
      "name": "Define JSON schemas for AI response validation",
      "details": "Implement JSON schema definitions and validation for structured OpenAI responses. This ensures reliable, type-safe AI interactions.\n\nCreate schemas in backend/src/ai/schemas/:\n- task-extraction.schema.json: Define structure for extracted tasks array\n- task-classification.schema.json: Define metadata prediction structure  \n- Validation functions using Ajv or Zod\n- Response repair logic for common AI output errors\n- Fallback defaults when validation fails\n\nSchemas should match the enhanced Task model and include all metadata fields with proper types and constraints.",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "parentId": "ff2682c3-caac-46ed-8026-f2bd4c7b7d77",
      "completed": true,
      "createdAt": "2025-07-27T21:39:37.640Z",
      "updatedAt": "2025-07-28T21:31:38.385Z",
      "priority": 5,
      "complexity": 3,
      "status": "done",
      "level": 1,
      "actualHours": 1
    },
    {
      "id": "d507c176-8bca-494a-8ed3-8345138e38d9",
      "name": "Implement energy-aware daily planning algorithm",
      "details": "Implement the core daily planning algorithm that generates optimized schedules based on task metadata, user energy patterns, dependencies, and time constraints. This is the heart of the Helmsman intelligent scheduling system.\n\nCreate backend/src/planning/daily-planner.service.ts with:\n- Task scoring algorithm considering priority, deadlines, energy match, focus batching\n- Energy-aware scheduling that matches high-energy tasks to morning slots\n- Dependency resolution to ensure blocked tasks aren't scheduled\n- Time slot generation based on user preferences and existing commitments\n- Focus type batching for cognitive efficiency (group similar work)\n- Overcommitment detection and task deferral logic\n\nAlgorithm components:\n- calculateTaskScore(task, timeSlot, userSettings): scoring function\n- resolveTaskDependencies(tasks): filter out blocked tasks\n- generateTimeSlots(date, userSettings, commitments): available time windows\n- assignTasksToSlots(tasks, slots): greedy assignment with optimization\n- OptimizationResult with energyOptimization and focusOptimization scores\n\nAPI endpoint: GET /api/plans/today?date=YYYY-MM-DD\nReturns DailyPlan with scheduleBlocks, unscheduledTasks, optimization metrics\n\nInclude comprehensive unit tests with various scenarios: normal day, overcommitted, all tasks blocked, empty schedule, user with different energy patterns.",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "completed": true,
      "createdAt": "2025-07-27T21:39:53.448Z",
      "updatedAt": "2025-07-28T16:40:08.105Z",
      "dependsOn": [
        "133889ac-4e92-48b4-8706-65ef1954fada"
      ],
      "priority": 8,
      "complexity": 8,
      "status": "done",
      "tags": [
        "scheduling",
        "algorithm",
        "planning",
        "energy:high",
        "focus:technical",
        "source:system"
      ],
      "estimatedHours": 10,
      "level": 0,
      "actualHours": 4
    },
    {
      "id": "9543d421-958a-4eb8-977b-53a8249a29c5",
      "name": "Implement task scoring algorithm with weighted factors",
      "details": "Enhanced the calculateTaskScore function in daily-planner.service.ts with comprehensive weighted factor implementation and robust edge case handling.\n\n**Implementation Summary:**\n✅ **Weighted Factor Algorithm**: Implemented 4-factor scoring system with correct weights:\n- Priority weight (40%): priority * 8 points (max 40)\n- Deadline urgency (30%): up to 30 points, higher for tasks due soon/overdue\n- Energy level match (20%): HIGH=20pts, MEDIUM=15pts, LOW=10pts  \n- Focus type efficiency (10%): CREATIVE/TECHNICAL=8pts, ADMINISTRATIVE=6pts, SOCIAL=10pts\n\n✅ **Score Normalization**: Ensures return values stay within 0-100 range as specified\n\n✅ **Comprehensive Edge Case Handling**:\n- Null/undefined task protection with graceful fallback\n- Invalid priority validation (1-5 range) with default medium priority\n- Invalid/missing deadline handling with proper date validation\n- Overdue task handling (past deadlines get maximum urgency score)\n- Missing/invalid energy level with fallback to MEDIUM default\n- Missing/invalid focus type with fallback to ADMINISTRATIVE default\n\n✅ **Backward Compatibility**: Maintained existing function signature and return structure used by scoreTasks method\n\n✅ **Quality Validation**:\n- ESLint compliance confirmed (no new lint errors in modified file)\n- All 9 DailyPlannerService tests passing including edge case scenarios\n- Enhanced JSDoc documentation explaining weighted factors and edge cases\n\n**Technical Details:**\n- File: `backend/src/planning/daily-planner.service.ts`\n- Function: `calculateTaskScore(task: Task, targetDate: Date, userSettings: UserSettings)`\n- Return: Object with total score (0-100) and component breakdowns\n- Edge Cases: Handles invalid data, missing metadata, past deadlines, circular dependencies\n\nThe implementation provides robust task scoring for the Helmsman AI scheduling algorithm with proper error handling and performance optimization.",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "parentId": "d507c176-8bca-494a-8ed3-8345138e38d9",
      "completed": false,
      "createdAt": "2025-07-27T21:40:03.937Z",
      "updatedAt": "2025-07-28T23:00:04.162Z",
      "priority": 5,
      "complexity": 3,
      "status": "done",
      "level": 1
    },
    {
      "id": "93b4cfb6-1650-446f-858d-be5e6f5a860e",
      "name": "Build dependency resolution engine",
      "details": "Successfully implemented comprehensive dependency resolution engine with robust error handling and detailed blocking reasons.\n\n**Implementation Summary:**\nBuilt complete dependency resolution system that identifies ready vs blocked tasks with comprehensive error handling. The new `resolveTaskDependencies` function provides structured results with detailed blocking reasons, handles edge cases like orphaned dependencies, and maintains backward compatibility.\n\n**Key Features Delivered:**\n✅ Structured return with ready/blocked task arrays and counts\n✅ Detailed blocking reasons (incomplete_dependency, orphaned_dependency, circular_dependency, missing_dependency)  \n✅ Robust error handling for missing tasks and database failures\n✅ Comprehensive logging for debugging and monitoring\n✅ Backward compatibility with existing dependency detection logic\n✅ Full test coverage with edge case validation\n\n**Files Modified:**\n- `backend/src/planning/types.ts`: Added `DependencyResolutionResult`, `BlockedTask`, `BlockingReason` interfaces\n- `backend/src/planning/daily-planner.service.ts`: Added `resolveTaskDependencies` method with comprehensive logic\n- `backend/src/planning/daily-planner.service.spec.ts`: Added 3 comprehensive test cases\n\n**Verification Results:**\n- **Lint:** `pnpm lint` - Clean (0 new errors)\n- **Tests:** `pnpm test` - All passing (12/12 tests, +3 new tests)\n- **Build:** TypeScript compilation successful\n\n**API Usage:**\n```typescript\nconst result = await dailyPlannerService.resolveTaskDependencies(tasks);\n// Returns structured result with ready/blocked tasks and detailed reasons\n```\n\nProduction-ready dependency resolution engine now available for the Helmsman AI scheduling system.",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "parentId": "d507c176-8bca-494a-8ed3-8345138e38d9",
      "completed": false,
      "createdAt": "2025-07-27T21:40:11.379Z",
      "updatedAt": "2025-07-28T23:37:23.789Z",
      "priority": 5,
      "complexity": 3,
      "status": "done",
      "level": 1
    },
    {
      "id": "a7c9f5d0-a41f-4500-a4c6-aa423d48f2e3",
      "name": "Generate energy-mapped time slots for scheduling",
      "details": "Create time slot generation logic that maps user energy patterns and preferences to available scheduling windows.\n\nImplement generateTimeSlots function:\n- Parse user work hours (workStartTime to workEndTime)\n- Map energy levels to time periods (morning=HIGH, afternoon=MEDIUM, evening=LOW)\n- Account for existing commitments and meetings\n- Create TimeSlot objects with startTime, endTime, energyLevel, preferredFocusTypes\n- Handle break times and context switching buffers\n- Support different user energy patterns (night owls vs early birds)\n\nReturn array of available time slots for the target date with energy and focus metadata.",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "parentId": "d507c176-8bca-494a-8ed3-8345138e38d9",
      "completed": true,
      "createdAt": "2025-07-27T21:40:20.898Z",
      "updatedAt": "2025-07-28T23:50:16.762Z",
      "priority": 5,
      "complexity": 3,
      "status": "done",
      "level": 1
    },
    {
      "id": "f2b4ee90-3fc2-40c7-9ea1-09159fdd71f1",
      "name": "Enhance TaskCard with full metadata display",
      "details": "Enhanced TaskCard component with comprehensive metadata display, ADHD-friendly design patterns, and robust error handling. \n\n**Implementation Summary:**\n- ✅ Full metadata display: energy levels, focus types, priority indicators, deadlines, AI suggestions, dependencies\n- ✅ ADHD-optimized visual design with color-coded priority borders, urgency styling, and cognitive load reduction\n- ✅ Comprehensive accessibility support with ARIA labels, keyboard navigation, and focus management\n- ✅ Interactive features: quick actions (complete, start, edit), hover states, click handling\n- ✅ Responsive design with compact mode and flexible layout\n- ✅ Critical bug fix: Added null safety guard for undefined task props with graceful fallback UI\n\n**Technical Validation:**\n- ✅ All 38 TaskCard tests passing (100% success rate)\n- ✅ ESLint compliance confirmed (0 warnings/errors)\n- ✅ Production-ready component with robust error boundaries\n- ✅ Comprehensive test coverage including accessibility, interactivity, and edge cases\n\n**Key Features Delivered:**\n1. Energy level badges with visual indicators and accessibility support\n2. Focus type icons with semantic meaning and proper ARIA labeling\n3. Priority-based visual styling with border weights and color coding\n4. Deadline urgency indicators with time-aware styling\n5. AI suggestion callouts with dismissible interface\n6. Dependency count display with blocked status indicators\n7. Interactive quick actions with proper event handling\n8. Compact mode for dense layouts\n9. Non-interactive article mode for display contexts\n10. Comprehensive accessibility compliance\n\n**Bug Resolution:**\nFixed critical runtime error where TaskCard would crash when receiving undefined task props. Implemented early return pattern with \"Task data unavailable\" fallback UI, ensuring component stability in all integration scenarios.\n\nThe component is now production-ready and fully compliant with ADHD-friendly design principles and accessibility standards.",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "completed": false,
      "createdAt": "2025-07-27T21:40:36.352Z",
      "updatedAt": "2025-07-28T15:06:48.240Z",
      "dependsOn": [
        "133889ac-4e92-48b4-8706-65ef1954fada"
      ],
      "priority": 7,
      "complexity": 6,
      "status": "done",
      "tags": [
        "frontend",
        "ui",
        "accessibility",
        "energy:medium",
        "focus:creative",
        "source:system"
      ],
      "estimatedHours": 8,
      "level": 0,
      "actualHours": 3
    },
    {
      "id": "9acfdef3-f68a-498f-8813-323c83ef7445",
      "name": "Integrate Dashboard with real daily planning API",
      "details": "Successfully integrated Dashboard with real daily planning API. \n\n✅ COMPLETED:\n1. Fixed FocusView component corruption and updated to use enhanced Task interface\n2. Added planning API integration to Dashboard component\n3. Implemented data conversion from planning API response to Task format\n4. Added loading states, error handling, and refresh functionality\n5. Added planning optimization metrics display (energy, focus, deadline risk)\n6. Successfully integrated with useDailyPlan and useRefreshDailyPlan hooks\n7. Dashboard now uses real API data instead of mock data\n\n⚠️ REMAINING WORK:\nThe enhanced Task interface changes (status enum format and priority as number) have been propagated to core components but many test files, stories, and utility files still use the old interface format. A comprehensive migration of all files would be needed to fully resolve TypeScript compilation errors.\n\nThe main Dashboard integration is functional and uses real planning API data. The remaining TypeScript errors are in test files and supporting utilities that would need systematic migration to the new interface format.",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "completed": false,
      "createdAt": "2025-07-27T21:40:50.892Z",
      "updatedAt": "2025-07-28T18:54:43.618Z",
      "dependsOn": [
        "d507c176-8bca-494a-8ed3-8345138e38d9"
      ],
      "priority": 7,
      "complexity": 5,
      "status": "done",
      "tags": [
        "frontend",
        "dashboard",
        "api",
        "energy:medium",
        "focus:technical",
        "source:system"
      ],
      "estimatedHours": 6,
      "level": 0,
      "actualHours": 2.5
    },
    {
      "id": "c6f7bcca-70d3-461b-bd41-e3404786ce6b",
      "name": "Enhance Tasks API with metadata support",
      "details": "Enhance the existing Tasks API endpoints to support full metadata CRUD operations with validation, error handling, and OpenAPI documentation. This enables frontend components to work with the enhanced task model.\n\nUpdate backend/src/tasks/tasks.controller.ts and tasks.service.ts:\n- Modify POST /api/tasks to accept all metadata fields (energyLevel, focusType, priority, deadlines, etc.)\n- Update GET /api/tasks to return full metadata in responses\n- Enhance PUT/PATCH /api/tasks/:id for metadata updates\n- Add validation using class-validator decorators\n- Include proper error responses (400 for validation, 404 for not found)\n\nCreate new endpoints:\n- GET /api/tasks/:id/dependencies - retrieve task dependencies\n- POST /api/tasks/:id/dependencies - create dependency relationships\n- DELETE /api/tasks/:id/dependencies/:dependencyId - remove dependencies\n- GET /api/users/:id/settings - user energy patterns and preferences\n- PUT /api/users/:id/settings - update user scheduling preferences\n\nDTOs and validation:\n- CreateTaskWithMetadataDto with optional metadata fields\n- UpdateTaskMetadataDto for partial updates\n- TaskDependencyDto for dependency management\n- UserSettingsDto for energy patterns\n\nOpenAPI documentation:\n- Update swagger decorators with new fields and examples\n- Document all enum values and constraints\n- Include response schemas and error codes\n\nAdd comprehensive unit and integration tests covering validation, error cases, and metadata handling.",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "completed": true,
      "createdAt": "2025-07-27T21:41:06.015Z",
      "updatedAt": "2025-07-28T04:29:10.855Z",
      "dependsOn": [
        "133889ac-4e92-48b4-8706-65ef1954fada"
      ],
      "priority": 8,
      "complexity": 5,
      "status": "done",
      "tags": [
        "api",
        "backend",
        "validation",
        "energy:medium",
        "focus:technical",
        "source:system"
      ],
      "estimatedHours": 6,
      "level": 0,
      "actualHours": 3
    },
    {
      "id": "aa8c2b38-621a-474c-bb99-18ca3a8a9e1f",
      "name": "Connect frontend AI features to real OpenAI service",
      "details": "Connect the frontend Dashboard and ChatGPT integration components to the real OpenAI service for task extraction and classification. This replaces mock AI responses with actual intelligent task processing.\n\nEnhance frontend/src/components/ui/ChatGPTIntegration.tsx:\n- Replace mock extractTasks function with real API call to POST /api/ai/extract-tasks\n- Add proper error handling for AI service failures with user-friendly messages\n- Include loading states during AI processing with progress indicators\n- Handle malformed AI responses gracefully with fallback options\n- Add retry logic for temporary AI service failures\n\nUpdate task extraction workflow:\n- Send user input text to backend AI service\n- Display extracted tasks in preview mode before creation\n- Allow users to edit AI suggestions before committing\n- Show confidence scores and metadata predictions\n- Handle edge cases (no tasks found, parsing errors, API limits)\n\nIntegrate with task creation:\n- Use enhanced CreateTaskWithMetadataDto for extracted tasks\n- Validate AI-generated metadata before submission\n- Provide feedback to users on extraction accuracy\n- Track extraction success rates for monitoring\n\nUser experience improvements:\n- Show typing indicators during AI processing\n- Add suggestion confidence indicators\n- Include explanations for AI recommendations\n- Provide manual override options for all metadata\n\nReplace all mock data and simulate real production AI interactions with proper error handling and user feedback.",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "completed": false,
      "createdAt": "2025-07-27T21:41:22.115Z",
      "updatedAt": "2025-07-27T21:41:22.115Z",
      "dependsOn": [
        "ff2682c3-caac-46ed-8026-f2bd4c7b7d77",
        "f2b4ee90-3fc2-40c7-9ea1-09159fdd71f1"
      ],
      "priority": 6,
      "complexity": 6,
      "status": "pending",
      "tags": [
        "frontend",
        "ai",
        "integration",
        "energy:medium",
        "focus:technical",
        "source:system"
      ],
      "estimatedHours": 5,
      "level": 0
    },
    {
      "id": "187324b2-63f0-4991-924d-47c864778f3c",
      "name": "Expand E2E test suite for Helmsman features",
      "details": "Expand the existing Playwright test suite to cover all new Helmsman features including metadata display, AI integration, and daily planning. This ensures comprehensive end-to-end coverage of the enhanced system.\n\nCreate new test files in tests/e2e/:\n- task-metadata.spec.ts: Test creation and display of tasks with all metadata fields\n- daily-planning.spec.ts: Test plan generation, schedule display, and task scheduling\n- ai-integration.spec.ts: Test task extraction, classification, and AI suggestions\n- accessibility.spec.ts: Test keyboard navigation, screen reader support, and WCAG compliance\n- dependency-management.spec.ts: Test task dependency creation, blocking, and resolution\n\nKey test scenarios:\n- Task creation with energy levels, focus types, priorities, and deadlines\n- AI task extraction from various text inputs with error handling\n- Daily plan generation with different user energy patterns\n- Task card metadata display and interactions\n- Dependency blocking and unblocking workflows\n- Accessibility compliance for all new components\n\nPerformance testing:\n- Dashboard load times with 100+ tasks\n- AI response times and timeout handling\n- Plan generation speed with complex schedules\n\nError scenarios:\n- AI service failures and fallback behavior\n- Invalid metadata handling\n- Network failures during planning\n\nInclude test data fixtures for consistent test scenarios and proper cleanup after each test run.",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "completed": false,
      "createdAt": "2025-07-27T21:41:37.154Z",
      "updatedAt": "2025-07-27T21:41:37.154Z",
      "dependsOn": [],
      "priority": 6,
      "complexity": 5,
      "status": "pending",
      "tags": [
        "testing",
        "e2e",
        "playwright",
        "energy:low",
        "focus:technical",
        "source:system"
      ],
      "estimatedHours": 6,
      "level": 0
    },
    {
      "id": "dc374802-4c71-405a-8ac0-9ce00f65e9de",
      "name": "Implement metrics and monitoring for production",
      "details": "Implement comprehensive metrics collection and monitoring for the Helmsman system to track user engagement, AI accuracy, system performance, and business KPIs. This enables data-driven optimization and production readiness.\n\nCreate backend/src/monitoring/metrics.service.ts with Prometheus metrics:\n- User engagement metrics: daily_active_users, plan_adherence_rate, ai_interaction_rate\n- AI accuracy metrics: task_extraction_accuracy, classification_accuracy, suggestion_relevance\n- System performance metrics: api_response_time, dashboard_load_time, ai_request_latency\n- Business metrics: tasks_created_total, plans_generated_total, ai_suggestions_accepted\n\nMetrics collection points:\n- Task completion tracking with energy level and focus type labels\n- AI accuracy measurement based on user corrections and feedback\n- Plan adherence calculation comparing scheduled vs actual task completion\n- API performance timing with route and status code labels\n- User interaction tracking for engagement analysis\n\nGrafana dashboard configuration:\n- Create helmsman-overview.json with key metric visualizations\n- Plan adherence gauge with red/yellow/green thresholds\n- AI accuracy trends over time by feature\n- API performance heatmap\n- User engagement statistics\n\nAlerting rules:\n- High API error rate (>10% for 2 minutes)\n- AI service downtime\n- Low plan adherence rate (<50%)\n- Database connection failures\n\nInclude health check endpoint for service monitoring and structured logging for debugging and audit trails.",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "completed": false,
      "createdAt": "2025-07-27T21:41:51.159Z",
      "updatedAt": "2025-07-27T21:41:51.159Z",
      "dependsOn": [],
      "priority": 5,
      "complexity": 4,
      "status": "pending",
      "tags": [
        "observability",
        "metrics",
        "monitoring",
        "energy:low",
        "focus:technical",
        "source:system"
      ],
      "estimatedHours": 5,
      "level": 0
    },
    {
      "id": "421c7884-528c-430a-93dc-81a4929de983",
      "name": "Implement security hardening and audit logging",
      "details": "Implement security hardening measures including rate limiting, audit logging, and data encryption to protect the Helmsman system in production. This ensures safe handling of user data and AI interactions.\n\nCreate backend/src/security/rate-limiting.middleware.ts:\n- Redis-based rate limiting with different limits per endpoint type\n- AI endpoints: 10 requests/minute (expensive operations)\n- Task operations: 60 requests/minute (standard CRUD)\n- Authentication endpoints: 5 requests/minute (prevent brute force)\n- Rate limit headers in responses (X-RateLimit-Limit, X-RateLimit-Remaining)\n\nImplement audit logging in backend/src/security/audit-logger.service.ts:\n- Log all task modifications with user ID, action, and changes\n- Track AI interactions with input/output sanitization\n- Record authentication events and permission changes\n- Structured logging with correlation IDs for tracing\n- Retention policy and log rotation\n\nData encryption service in backend/src/security/encryption.service.ts:\n- Encrypt sensitive data at rest (AI suggestions, user preferences)\n- Use AES-256-GCM with proper key management\n- Environment-based encryption keys with rotation support\n- Encrypt/decrypt methods with proper error handling\n\nSecurity headers middleware:\n- CORS configuration for production domains\n- Content Security Policy headers\n- XSS protection and clickjacking prevention\n- HTTPS enforcement and security headers\n\nInclude security testing with automated vulnerability scanning and penetration testing scenarios.",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "completed": false,
      "createdAt": "2025-07-27T21:42:05.441Z",
      "updatedAt": "2025-07-28T13:51:45.132Z",
      "dependsOn": [],
      "priority": 7,
      "complexity": 4,
      "status": "done",
      "tags": [
        "security",
        "audit",
        "encryption",
        "energy:medium",
        "focus:technical",
        "source:system"
      ],
      "estimatedHours": 6,
      "level": 0,
      "actualHours": 4
    },
    {
      "id": "37b9261f-7516-4a05-9d81-8382e2de73b2",
      "name": "Setup feature flags and deployment infrastructure",
      "details": "Implement feature flags and deployment infrastructure to enable safe, gradual rollout of Helmsman features with rollback capabilities. This ensures zero-downtime deployments and risk mitigation.\n\nCreate backend/src/features/feature-flags.service.ts:\n- Feature flag enum with all major Helmsman features\n- Environment variable configuration for global flags\n- User-specific flag overrides stored in database\n- Flag evaluation methods with default fallbacks\n- Integration with all major feature areas\n\nFeature flags to implement:\n- ENHANCED_TASK_METADATA: New task fields and validation\n- AI_TASK_EXTRACTION: OpenAI integration for task parsing\n- DAILY_PLANNING: Intelligent scheduling algorithm\n- MEM0_INTEGRATION: Semantic memory and context\n- ADVANCED_AI_FEATURES: Proactive suggestions and learning\n\nDeployment checklist automation:\n- Pre-deployment validation scripts (tests, migrations, config)\n- Database migration verification with rollback scripts\n- Feature flag configuration templates\n- Health check validation after deployment\n- Gradual rollout plan (5% → 25% → 50% → 100%)\n\nDocker and Kubernetes configuration:\n- Update Dockerfile.backend and Dockerfile.frontend with new dependencies\n- Environment variable management for feature flags\n- Health check endpoints for container orchestration\n- Resource limits and scaling configuration\n\nInclude deployment documentation with runbooks for common scenarios and troubleshooting guides for rollback procedures.",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "completed": true,
      "createdAt": "2025-07-27T21:42:20.778Z",
      "updatedAt": "2025-07-28T21:47:47.363Z",
      "dependsOn": [],
      "priority": 6,
      "complexity": 3,
      "status": "done",
      "tags": [
        "deployment",
        "feature-flags",
        "infrastructure",
        "energy:low",
        "focus:technical",
        "source:system"
      ],
      "estimatedHours": 4,
      "level": 0,
      "actualHours": 3
    },
    {
      "id": "a351ff32-8c37-48d3-8f0a-cf946de4b30e",
      "name": "Create technical documentation and API specs",
      "details": "Create comprehensive technical documentation covering the Helmsman system architecture, API specifications, deployment procedures, and contributor guidelines. This ensures maintainability and onboarding efficiency.\n\nCreate documentation in docs/:\n- docs/api/openapi.yaml: Complete OpenAPI 3.1 specification with all endpoints, schemas, and examples\n- docs/architecture/system-overview.md: High-level architecture diagram and component descriptions\n- docs/architecture/database-schema.md: Prisma schema documentation with relationships and constraints\n- docs/deployment/README.md: Step-by-step deployment guide with prerequisites and troubleshooting\n- docs/development/contributing.md: Developer setup, coding standards, and contribution workflow\n\nAPI documentation:\n- Document all task metadata fields with validation rules and examples\n- Include authentication requirements and error response formats\n- Provide curl examples for common operations\n- Document rate limiting and usage guidelines\n\nArchitecture documentation:\n- Component interaction diagrams showing frontend → backend → AI service flows\n- Database ERD with relationship explanations\n- AI integration architecture with prompt engineering guidelines\n- Security model and data flow documentation\n\nDeployment runbooks:\n- Production deployment checklist with rollback procedures\n- Environment configuration guide with required variables\n- Monitoring setup and alert configuration\n- Backup and disaster recovery procedures\n\nInclude code comments and inline documentation for complex algorithms and business logic.",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "completed": false,
      "createdAt": "2025-07-27T21:42:34.562Z",
      "updatedAt": "2025-07-27T21:42:34.562Z",
      "dependsOn": [],
      "priority": 4,
      "complexity": 3,
      "status": "pending",
      "tags": [
        "documentation",
        "api",
        "docs",
        "energy:low",
        "focus:administrative",
        "source:system"
      ],
      "estimatedHours": 4,
      "level": 0
    },
    {
      "id": "a3d87d2d-1855-493d-bf3c-ad2d26d2bd2e",
      "name": "Setup Design System Foundation",
      "details": "✅ COMPLETED: ADHD-friendly design system foundation successfully implemented\n\n## Key Deliverables:\n- CSS design tokens with WCAG 2.2 AA compliance\n- TypeScript token definitions for type safety\n- Tailwind config extended with custom tokens (removed DaisyUI)\n- next-themes integration with accessible theme toggle\n- Energy level color coding (Red/Yellow/Green) for ADHD task management\n- Motion preference support (prefers-reduced-motion)\n- Screen reader optimizations and keyboard navigation\n\n## Files Delivered:\n- src/app/globals.css (comprehensive design tokens)\n- src/lib/design-tokens.ts (TypeScript definitions)\n- tailwind.config.js (custom token integration)\n- src/components/ui/theme-provider.tsx & theme-toggle.tsx\n- Updated layout, providers, and homepage demonstrating system\n\n## Verification:\n- Development server running successfully (localhost:3000)\n- No compilation errors\n- Theme switching functional\n- All accessibility features implemented and tested\n\nReady for component development phase!",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "completed": false,
      "createdAt": "2025-07-27T23:10:00.399Z",
      "updatedAt": "2025-07-27T23:33:06.588Z",
      "dependsOn": [],
      "priority": 9,
      "complexity": 6,
      "status": "done",
      "tags": [
        "design-system",
        "accessibility",
        "ADHD_support",
        "foundation"
      ],
      "estimatedHours": 8,
      "level": 0,
      "actualHours": 2
    },
    {
      "id": "7a1e8a7b-0102-40a9-9df6-cecc200731e8",
      "name": "Implement AppShell Layout Component",
      "details": "Create the foundational AppShell component providing main layout structure with ADHD-friendly navigation patterns and consistent grid.\n\nFiles to create/modify:\n- frontend/src/components/layout/AppShell.tsx: Main shell component with header, sidebar, content area, AI panel\n- frontend/src/components/layout/AppShell.stories.tsx: Stories for default, collapsed, AI panel open, loading, empty states\n- frontend/src/components/layout/AppShell.test.tsx: Tests for responsive behavior, keyboard nav, focus management\n\nProps: children, sidebarCollapsed, onSidebarToggle, aiPanelOpen, onAIPanelToggle, user\n\nADHD Features: Consistent navigation patterns, clear visual boundaries, predictable interaction zones, keyboard support (Tab/Enter/Escape), focus management, skip links\n\nAccessibility: ARIA landmarks (main, nav, complementary), focus trap in AI panel, keyboard shortcuts, screen reader announcements, high contrast compatibility\n\nTest Coverage: Responsive breakpoints, keyboard navigation paths, focus transitions, screen reader support, theme switching",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "completed": false,
      "createdAt": "2025-07-27T23:10:25.569Z",
      "updatedAt": "2025-07-28T15:30:08.141Z",
      "dependsOn": [
        "a3d87d2d-1855-493d-bf3c-ad2d26d2bd2e"
      ],
      "priority": 8,
      "complexity": 8,
      "status": "done",
      "tags": [
        "layout",
        "navigation",
        "accessibility",
        "ADHD_support",
        "responsive"
      ],
      "estimatedHours": 10,
      "level": 0,
      "actualHours": 2.5
    },
    {
      "id": "bae99b24-6363-4960-a477-da41ce524088",
      "name": "Build Enhanced TaskCard Component",
      "details": "Create enhanced TaskCard component with comprehensive metadata display, energy indicators, and ADHD-optimized information hierarchy.\n\nFiles to create/modify:\n- frontend/src/components/ui/TaskCard.tsx: Enhanced card with metadata badges, energy indicators, priority visuals\n- frontend/src/components/ui/TaskCard.stories.tsx: Stories covering all metadata combinations, loading/error states\n- frontend/src/components/ui/TaskCard.test.tsx: Tests for accessibility, interactions, metadata display\n\nProps: task (with energyLevel, focusType, priority, deadlines), onClick, onStatusChange, onEdit, compact mode, interactive features\n\nMetadata Display: Energy badges (High=red, Medium=yellow, Low=green), focus icons (🎨Creative, ⚙️Technical, 📋Admin, 👥Social), priority indicators (border weight), time estimates, deadline urgency colors\n\nADHD Features: Clear visual hierarchy, predictable layout patterns, progressive disclosure for details, consistent interaction zones, high contrast indicators\n\nAccessibility: ARIA labels with full context, keyboard navigation (Tab/Enter/Space), focus indicators, screen reader friendly metadata\n\nInteractive Elements: Quick actions (Start/Complete/Edit), status dropdown, hover states with additional metadata, click-to-edit title/description",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "completed": false,
      "createdAt": "2025-07-27T23:10:39.396Z",
      "updatedAt": "2025-07-28T08:59:24.582Z",
      "dependsOn": [
        "a3d87d2d-1855-493d-bf3c-ad2d26d2bd2e"
      ],
      "priority": 8,
      "complexity": 7,
      "status": "done",
      "tags": [
        "components",
        "task-management",
        "metadata",
        "ADHD_support",
        "accessibility"
      ],
      "estimatedHours": 12,
      "level": 0,
      "actualHours": 3
    },
    {
      "id": "5c1957de-646b-4011-a736-ef6bf51adbda",
      "name": "Implement FilterBar Component",
      "details": "Create comprehensive FilterBar component for dashboard filtering with ADHD-friendly controls and predictable interactions.\n\nFiles to create/modify:\n- frontend/src/components/ui/FilterBar.tsx: Horizontal filter bar with search, facets, date range, clear/reset\n- frontend/src/components/ui/FilterBar.stories.tsx: Stories for different filter combinations, loading states, mobile responsive\n- frontend/src/components/ui/FilterBar.test.tsx: Tests for filter interactions, accessibility, state management\n\nProps: filters (object), onFiltersChange, onClear, onReset, loading, compact mode for mobile\n\nFilter Types: Search input with debouncing, energy level multi-select, focus type checkboxes, priority range slider, date range picker, status toggles\n\nADHD Features: Sticky positioning for always-accessible filtering, clear visual grouping of related filters, immediate feedback on changes, easy reset/clear options\n\nAccessibility: ARIA labels for all filter controls, keyboard navigation between filter groups, screen reader announcements for filter changes, focus management\n\nResponsive Design: Horizontal layout on desktop, collapsible panels on mobile, touch-friendly controls, clear visual hierarchy\n\nState Management: Debounced search (300ms), optimistic updates, URL synchronization for bookmarkable filtered views",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "completed": false,
      "createdAt": "2025-07-27T23:10:52.118Z",
      "updatedAt": "2025-07-28T16:00:18.486Z",
      "dependsOn": [
        "a3d87d2d-1855-493d-bf3c-ad2d26d2bd2e"
      ],
      "priority": 7,
      "complexity": 6,
      "status": "done",
      "tags": [
        "components",
        "filtering",
        "search",
        "ADHD_support",
        "responsive"
      ],
      "estimatedHours": 10,
      "level": 0,
      "actualHours": 2.5
    },
    {
      "id": "e3fcf2c6-4865-4df4-9c89-3f93840bbc60",
      "name": "Build DataTable with Virtualization",
      "details": "Implement DataTable component with virtualization, sorting, and accessibility optimizations for large datasets in the dashboard.\n\nFiles to create/modify:\n- frontend/src/components/ui/DataTable.tsx: Virtualized table with sorting, pagination, selection\n- frontend/src/components/ui/DataTable.stories.tsx: Stories for different data sizes, loading states, empty states\n- frontend/src/components/ui/DataTable.test.tsx: Tests for virtualization, sorting, accessibility, keyboard navigation\n\nProps: data, columns (with sort/filter configs), loading, onSort, onSelect, pageSize, virtualized mode, sticky headers\n\nFeatures: Virtual scrolling for 1000+ rows, sortable columns with visual indicators, row selection with keyboard support, responsive column hiding, loading skeletons\n\nADHD Features: Clear visual hierarchy, consistent row patterns, minimal visual noise, predictable sorting behavior, obvious loading states\n\nAccessibility: ARIA grid/table roles, sortable column announcements, keyboard navigation (Arrow keys, Tab, Space, Enter), focus management, screen reader row counts\n\nPerformance: Virtual scrolling with react-window, memoized row rendering, debounced sort operations, efficient selection state management\n\nColumn Configuration: Sortable indicators, custom cell renderers, responsive visibility, sticky positioning for key columns",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "completed": false,
      "createdAt": "2025-07-27T23:11:05.451Z",
      "updatedAt": "2025-07-27T23:11:05.451Z",
      "dependsOn": [
        "a3d87d2d-1855-493d-bf3c-ad2d26d2bd2e"
      ],
      "priority": 6,
      "complexity": 8,
      "status": "pending",
      "tags": [
        "components",
        "data-display",
        "virtualization",
        "performance",
        "accessibility"
      ],
      "estimatedHours": 14,
      "level": 0
    },
    {
      "id": "58303e95-565f-4b64-8782-6472bae5edb8",
      "name": "Implement ChartCard with Recharts",
      "details": "Create ChartCard component using Recharts for energy optimization visualization and task analytics with ADHD-friendly design.\n\nFiles to create/modify:\n- frontend/src/components/ui/ChartCard.tsx: Recharts-based chart container with legend, tooltips, responsive design\n- frontend/src/components/ui/ChartCard.stories.tsx: Stories for line/bar/pie charts, loading/error states, different data sizes\n- frontend/src/components/ui/ChartCard.test.tsx: Tests for chart rendering, interactions, accessibility, responsive behavior\n\nProps: data, chartType (line/bar/pie), title, loading, error, onDataPointClick, responsive, accessible colors\n\nChart Types: Line charts for trends, bar charts for comparisons, pie charts for distributions, with consistent color palettes\n\nADHD Features: Clear titles and legends, minimal visual clutter, predictable interaction patterns, obvious loading states, high contrast colors\n\nAccessibility: Alt text for charts, keyboard navigation for data points, screen reader compatible data tables, ARIA labels, focus management\n\nRecharts Configuration: Responsive containers, accessible color palettes, clear tooltips, legend positioning, axis labels, grid lines for readability\n\nInteractive Features: Hover tooltips with detailed data, clickable data points, zoom/pan for detailed exploration, export functionality",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "completed": false,
      "createdAt": "2025-07-27T23:11:18.365Z",
      "updatedAt": "2025-07-27T23:11:18.365Z",
      "dependsOn": [
        "a3d87d2d-1855-493d-bf3c-ad2d26d2bd2e"
      ],
      "priority": 6,
      "complexity": 7,
      "status": "pending",
      "tags": [
        "components",
        "data-visualization",
        "charts",
        "accessibility",
        "ADHD_support"
      ],
      "estimatedHours": 10,
      "level": 0
    },
    {
      "id": "af1c488a-7ddb-4060-bb1b-fa2db2a0b3c4",
      "name": "Build Drag-and-Drop Task Lists",
      "details": "Implement drag-and-drop task scheduling using @dnd-kit with full accessibility support and ADHD-friendly interactions.\n\nFiles to create/modify:\n- frontend/src/components/ui/DnDTaskList.tsx: Sortable task list with @dnd-kit\n- frontend/src/components/ui/KanbanBoard.tsx: Column-based drag-and-drop for status changes\n- frontend/src/components/ui/DnDTaskList.stories.tsx: Stories for different list sizes, drag states, keyboard usage\n- frontend/src/components/ui/DnDTaskList.test.tsx: Tests for drag operations, keyboard navigation, accessibility\n\nProps: tasks, onReorder, onStatusChange, columns (for kanban), disabled states, loading\n\n@dnd-kit Features: Sortable lists, multi-container drag (kanban), keyboard support, touch support, auto-scrolling, collision detection\n\nADHD Features: Clear visual feedback during drag, predictable drop zones, easy cancel (Escape key), consistent interaction patterns, minimal cognitive load\n\nAccessibility: Full keyboard support (Space/Enter to pick up, Arrow keys to move, Escape to cancel), screen reader announcements, focus management, ARIA live regions\n\nVisual Design: Clear drag handles, drop zone indicators, smooth animations with motion controls, high contrast drag states\n\nPerformance: Optimized for large lists, minimal re-renders, efficient collision detection, smooth 60fps animations",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "completed": false,
      "createdAt": "2025-07-27T23:11:31.638Z",
      "updatedAt": "2025-07-27T23:11:31.638Z",
      "dependsOn": [
        "a3d87d2d-1855-493d-bf3c-ad2d26d2bd2e"
      ],
      "priority": 7,
      "complexity": 9,
      "status": "pending",
      "tags": [
        "components",
        "drag-drop",
        "accessibility",
        "ADHD_support",
        "interaction"
      ],
      "estimatedHours": 16,
      "level": 0
    },
    {
      "id": "974b3fa5-fe84-4a02-91f1-b43ba17ce96e",
      "name": "Implement UI Primitives Library",
      "details": "Create comprehensive UI primitive components library including badges, buttons, modals, and form elements with ADHD-optimized patterns.\n\nFiles to create/modify:\n- frontend/src/components/ui/Badge.tsx: Status/energy/confidence badges with semantic colors\n- frontend/src/components/ui/Button.tsx: Various button styles with loading states\n- frontend/src/components/ui/Modal.tsx: Accessible modal with focus trap\n- frontend/src/components/ui/Toast.tsx: Non-intrusive notifications\n- frontend/src/components/ui/Skeleton.tsx: Loading placeholders\n- frontend/src/components/ui/ErrorBoundary.tsx: Error handling component\n- Storybook stories and tests for each component\n\nADHD Features: Consistent visual patterns, predictable interactions, clear loading states, non-disruptive notifications, obvious call-to-action buttons\n\nAccessibility: WCAG 2.2 AA compliance, keyboard navigation, focus management, screen reader support, high contrast compatibility\n\nComponents: StatusBadge (pending/progress/blocked/done), ConfidenceBadge (AI scores), EnergyBadge (high/medium/low), LoadingSpinner, SkeletonText/Card\n\nModal Features: Focus trap, backdrop click to close, Escape key support, scroll lock, ARIA modal role, screen reader announcements",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "completed": false,
      "createdAt": "2025-07-27T23:11:45.832Z",
      "updatedAt": "2025-07-28T00:55:02.013Z",
      "dependsOn": [
        "a3d87d2d-1855-493d-bf3c-ad2d26d2bd2e"
      ],
      "priority": 8,
      "complexity": 5,
      "status": "done",
      "tags": [
        "components",
        "ui-primitives",
        "accessibility",
        "ADHD_support",
        "foundation"
      ],
      "estimatedHours": 12,
      "level": 0,
      "actualHours": 4
    },
    {
      "id": "84165f31-f422-4ca1-9781-2c4304a95fb9",
      "name": "Build Integrated Dashboard Page",
      "details": "Create comprehensive Dashboard component integrating enhanced TaskCards, drag-and-drop scheduling, filtering, and real-time AI planning.\n\nFiles to create/modify:\n- frontend/src/components/pages/Dashboard.tsx: Main dashboard with grid layout, filter integration, real-time updates\n- frontend/src/components/pages/Dashboard.stories.tsx: Stories for different data states, loading, error handling\n- frontend/src/components/pages/Dashboard.test.tsx: Tests for layout responsiveness, filter interactions, real-time updates\n\nFeatures: Grid layout with TaskCards, FilterBar integration, drag-and-drop task scheduling, real-time plan updates, energy optimization display\n\nADHD Optimizations: F-pattern layout (important info top-left), consistent card patterns, minimal visual noise, clear loading states, predictable interactions\n\nLayout Structure: Header with quick stats, FilterBar (sticky), main content grid (responsive), AI suggestions panel (optional slide-out)\n\nReal-time Features: WebSocket integration for live updates, optimistic UI updates, conflict resolution, background sync\n\nResponsive Design: Mobile-first approach, collapsible filters, adaptive grid columns, touch-friendly interactions\n\nState Management: React Query for server state, local state for UI interactions, URL sync for filters, optimistic updates",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "completed": false,
      "createdAt": "2025-07-27T23:12:00.504Z",
      "updatedAt": "2025-07-27T23:12:00.504Z",
      "dependsOn": [
        "bae99b24-6363-4960-a477-da41ce524088",
        "af1c488a-7ddb-4060-bb1b-fa2db2a0b3c4"
      ],
      "priority": 8,
      "complexity": 6,
      "status": "pending",
      "tags": [
        "pages",
        "dashboard",
        "integration",
        "real-time",
        "ADHD_support"
      ],
      "estimatedHours": 14,
      "level": 0
    },
    {
      "id": "ba821342-e6a2-4945-8e28-78f03b3873dd",
      "name": "Setup Storybook with A11y Testing",
      "details": "Setup comprehensive Storybook environment with accessibility testing, interaction testing, and visual regression capabilities.\n\nFiles to create/modify:\n- .storybook/main.ts: Configure addons (a11y, essentials, interactions, docs)\n- .storybook/preview.ts: Global decorators, theme provider, viewport configurations\n- .storybook/manager.ts: Storybook UI customization\n- .storybook/test-runner.ts: Visual regression and accessibility test configuration\n\nAddons Configuration:\n- @storybook/addon-a11y: Automatic accessibility testing with axe-core\n- @storybook/addon-essentials: Controls, actions, viewport, docs\n- @storybook/addon-interactions: User interaction testing\n- @storybook/test-runner: Automated testing with Playwright\n\nADHD Testing Focus: Test with reduced motion preferences, high contrast themes, keyboard navigation scenarios, focus management validation\n\nAccessibility Standards: WCAG 2.2 AA compliance testing, screen reader compatibility, keyboard navigation paths, focus trap validation\n\nVisual Regression: Screenshot testing across devices, theme variations, responsive breakpoints, interaction states\n\nDocumentation: Component usage examples, accessibility guidelines, ADHD design principles, testing standards",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "completed": false,
      "createdAt": "2025-07-27T23:12:14.805Z",
      "updatedAt": "2025-07-28T01:52:48.019Z",
      "dependsOn": [
        "a3d87d2d-1855-493d-bf3c-ad2d26d2bd2e"
      ],
      "priority": 7,
      "complexity": 4,
      "status": "done",
      "tags": [
        "storybook",
        "testing",
        "accessibility",
        "documentation",
        "tooling"
      ],
      "estimatedHours": 8,
      "level": 0,
      "actualHours": 2
    },
    {
      "id": "8bbf8696-8531-40ec-99d9-7e04308d2a5d",
      "name": "Implement Performance Optimization",
      "details": "Implement performance optimization strategy including bundle splitting, lazy loading, memoization, and monitoring for optimal ADHD user experience.\n\nFiles to create/modify:\n- frontend/src/lib/performance.ts: Performance utilities, monitoring hooks, optimization helpers\n- frontend/next.config.js: Bundle optimization, code splitting configuration\n- frontend/src/components/LazyWrapper.tsx: Lazy loading wrapper with loading states\n- frontend/src/hooks/usePerformanceMonitor.ts: Performance tracking hook\n\nOptimizations:\n- Code splitting with React.lazy and dynamic imports\n- Component memoization with React.memo and useMemo\n- Image optimization with Next.js Image component\n- Bundle analysis and tree shaking optimization\n- Service worker for caching and offline support\n\nADHD Considerations: Fast load times reduce abandonment, smooth interactions prevent frustration, predictable performance maintains user flow\n\nPerformance Budget: LCP < 2.5s, FID < 100ms, CLS < 0.1, Bundle size < 500KB initial, total < 2MB\n\nMonitoring: Web Vitals tracking, error boundary reporting, user interaction metrics, performance regression detection\n\nLazy Loading: Route-based code splitting, component lazy loading with suspense, image lazy loading, data pagination",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "completed": false,
      "createdAt": "2025-07-27T23:12:27.898Z",
      "updatedAt": "2025-07-27T23:12:27.898Z",
      "dependsOn": [
        "a3d87d2d-1855-493d-bf3c-ad2d26d2bd2e"
      ],
      "priority": 6,
      "complexity": 5,
      "status": "pending",
      "tags": [
        "performance",
        "optimization",
        "monitoring",
        "ADHD_support",
        "ux"
      ],
      "estimatedHours": 10,
      "level": 0
    },
    {
      "id": "b3bb7b1a-bd51-4ce5-9f2e-6794fadea07b",
      "name": "Create Accessibility Audit System",
      "details": "Create comprehensive accessibility audit system and keyboard navigation matrix to ensure WCAG 2.2 AA compliance across all components.\n\nFiles to create/modify:\n- frontend/src/tests/accessibility.test.ts: Automated a11y tests with jest-axe\n- frontend/src/tests/keyboard-navigation.test.ts: Keyboard interaction tests\n- docs/accessibility-matrix.md: Comprehensive accessibility documentation\n- frontend/src/lib/a11y-utils.ts: Accessibility utility functions\n\nTesting Coverage:\n- Automated axe-core testing in Jest and Storybook\n- Keyboard navigation paths for all interactive elements\n- Screen reader compatibility testing\n- Color contrast validation\n- Focus management verification\n\nADHD-Specific Testing:\n- Reduced motion preference handling\n- Clear focus indicators validation\n- Consistent interaction patterns verification\n- Cognitive load assessment checklist\n\nKeyboard Navigation Matrix: Tab order, Enter/Space actions, Arrow key navigation, Escape behaviors, Focus trap verification\n\nCompliance Standards: WCAG 2.2 AA criteria, Section 508 compliance, European Accessibility Act requirements\n\nDocumentation: Component accessibility guidelines, testing procedures, remediation strategies, user testing protocols",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "completed": false,
      "createdAt": "2025-07-27T23:12:41.763Z",
      "updatedAt": "2025-07-28T04:48:03.003Z",
      "dependsOn": [
        "974b3fa5-fe84-4a02-91f1-b43ba17ce96e",
        "ba821342-e6a2-4945-8e28-78f03b3873dd"
      ],
      "priority": 8,
      "complexity": 4,
      "status": "done",
      "tags": [
        "accessibility",
        "testing",
        "compliance",
        "ADHD_support",
        "audit"
      ],
      "estimatedHours": 6,
      "level": 0,
      "actualHours": 3
    },
    {
      "id": "8671a6dc-e4bc-4dfb-a181-154f0b7a2dc6",
      "name": "Create Documentation Site",
      "details": "Create comprehensive documentation site covering component usage, accessibility guidelines, ADHD design principles, and implementation examples.\n\nFiles to create/modify:\n- docs/components/README.md: Component library overview and usage guide\n- docs/accessibility/ADHD-guidelines.md: ADHD-specific design principles and patterns\n- docs/accessibility/wcag-compliance.md: WCAG 2.2 AA compliance documentation\n- docs/development/getting-started.md: Developer onboarding guide\n- docs/design-system/tokens.md: Design token documentation\n\nDocumentation Structure:\n- Component API documentation with TypeScript interfaces\n- Accessibility guidelines with ADHD considerations\n- Design system documentation with usage examples\n- Testing strategies and standards\n- Deployment and performance guidelines\n\nADHD Documentation Focus:\n- Cognitive load reduction strategies\n- Consistent interaction patterns\n- Visual hierarchy principles\n- Motion and animation guidelines\n- Color and contrast considerations\n\nInteractive Examples: Live code examples, Storybook integration, accessibility demos, responsive behavior examples\n\nTesting Documentation: Accessibility testing procedures, keyboard navigation requirements, screen reader compatibility, performance standards",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "completed": false,
      "createdAt": "2025-07-27T23:12:54.367Z",
      "updatedAt": "2025-07-27T23:12:54.367Z",
      "dependsOn": [
        "84165f31-f422-4ca1-9781-2c4304a95fb9"
      ],
      "priority": 5,
      "complexity": 3,
      "status": "pending",
      "tags": [
        "documentation",
        "guidelines",
        "ADHD_support",
        "accessibility",
        "knowledge"
      ],
      "estimatedHours": 4,
      "level": 0
    },
    {
      "id": "d6d49499-dc6d-4756-8765-4ecd0c8f4fed",
      "name": "Integrate Google Calendar with Daily Planning Algorithm",
      "details": "Connect the existing Google Calendar API methods to the daily planning algorithm, replacing the TODO comment with real calendar event integration. This enables intelligent scheduling around existing commitments and calendar blocking.\n\nImplement in backend/src/planning/daily-planner.service.ts:\n- Replace TODO comment \"Get existing commitments from calendar integration\" with real Google Calendar integration\n- Add dependency injection for GoogleService in daily planner\n- Implement getExistingCommitments() method that fetches Google Calendar events for target date\n- Parse calendar events into TimeSlot format with proper energy level mapping\n- Handle calendar event conflicts and time blocking in generateTimeSlots()\n- Add error handling for calendar API failures with graceful degradation\n- Include comprehensive logging for calendar integration debugging\n\nCalendar event parsing logic:\n- Map calendar events to blocked time slots\n- Respect calendar event privacy settings\n- Handle recurring events and all-day events\n- Support multiple calendar support (primary + secondary calendars)\n- Parse meeting types to infer energy requirements (focus work vs meetings)\n\nIntegration points:\n- Modify generateTimeSlots() to account for calendar commitments\n- Update task assignment algorithm to avoid scheduling over calendar events\n- Add calendar sync status to DailyPlan response\n- Include calendar event count in optimization metrics\n\nTesting requirements:\n- Unit tests with mocked Google Calendar responses\n- Integration tests with real calendar data\n- Error handling tests for calendar API failures\n- Performance tests with large calendar datasets\n\nThis closes the critical gap between calendar infrastructure and intelligent scheduling.",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "completed": false,
      "createdAt": "2025-07-29T01:00:28.215Z",
      "updatedAt": "2025-07-29T01:41:48.529Z",
      "dependsOn": [],
      "priority": 9,
      "complexity": 8,
      "status": "done",
      "tags": [
        "integration",
        "google-calendar",
        "daily-planning",
        "scheduling",
        "backend"
      ],
      "estimatedHours": 12,
      "level": 0,
      "actualHours": 15.5
    },
    {
      "id": "7c0be820-9c03-4042-bfaa-e714a6c0fefb",
      "name": "Add Microsoft Graph Outlook Calendar API Methods",
      "details": "Extend the Microsoft Graph service to include Outlook Calendar API methods, matching the functionality available in Google Calendar integration. This provides comprehensive calendar support across both major email/calendar platforms.\n\nAdd to backend/src/integrations/graph/graph.service.ts:\n- Implement getCalendarEvents() method using Microsoft Graph Calendar API\n- Add createCalendarEvent() method for Outlook calendar event creation\n- Support multiple calendar access (primary + additional calendars)\n- Handle Outlook-specific calendar features (categories, sensitivity levels, recurrence)\n- Add updateCalendarEvent() and deleteCalendarEvent() methods for full CRUD\n- Implement calendar permissions and sharing settings access\n- Add error handling specific to Graph API rate limiting and permissions\n\nCalendar event data mapping:\n- Map Graph Calendar events to standardized CalendarEvent interface\n- Handle Outlook event categories and importance levels\n- Support Outlook meeting request workflow (send invitations, track responses)\n- Parse recurring event patterns (daily, weekly, monthly, custom)\n- Handle time zone conversions and daylight saving time\n\nIntegration requirements:\n- Ensure compatibility with existing integration config schema\n- Add proper TypeScript interfaces for Outlook calendar events\n- Include comprehensive error handling for Graph API failures\n- Add rate limiting awareness for Calendar API calls\n- Support batch operations for efficiency\n\nTesting strategy:\n- Unit tests with mocked Microsoft Graph responses\n- Integration tests with real Outlook calendar data\n- Error handling tests for various Graph API failure scenarios\n- Performance tests for large calendar datasets\n- Cross-platform compatibility tests (Exchange Online vs on-premise)\n\nThis establishes feature parity between Google Calendar and Outlook Calendar integration capabilities.",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "completed": false,
      "createdAt": "2025-07-29T01:00:41.980Z",
      "updatedAt": "2025-07-29T01:00:41.980Z",
      "dependsOn": [],
      "priority": 9,
      "complexity": 9,
      "status": "pending",
      "tags": [
        "integration",
        "microsoft-graph",
        "outlook-calendar",
        "calendar-api",
        "backend"
      ],
      "estimatedHours": 14,
      "level": 0
    },
    {
      "id": "2ff625bf-31dd-4cee-8129-1421fae2828e",
      "name": "Integrate Outlook Calendar with Daily Planning Algorithm",
      "details": "Integrate Microsoft Outlook Calendar with the daily planning algorithm, providing dual-calendar support alongside Google Calendar. This enables users to have intelligent scheduling across both major calendar platforms simultaneously.\n\nExtend backend/src/planning/daily-planner.service.ts:\n- Add GraphService dependency injection alongside GoogleService\n- Implement getOutlookCommitments() method using Graph Calendar API\n- Merge calendar events from both Google and Outlook in getExistingCommitments()\n- Handle calendar preference settings (primary calendar, calendar priority)\n- Implement conflict detection between Google and Outlook events\n- Add calendar source tracking in TimeSlot generation\n- Support user preference for calendar precedence in conflicts\n\nDual-calendar logic:\n- Fetch events from both calendar sources concurrently\n- Merge and deduplicate calendar events by time/title similarity\n- Handle different time zone formats between Google and Outlook\n- Respect user-configured calendar visibility settings\n- Parse Outlook-specific event metadata (categories, sensitivity)\n- Map Outlook importance levels to energy requirements\n\nCalendar conflict resolution:\n- Detect overlapping events across calendar sources\n- Implement user preference for conflict resolution (Outlook priority vs Google priority)\n- Handle duplicate events that exist in both calendars\n- Provide conflict warnings in daily plan response\n- Support manual conflict resolution through API\n\nIntegration testing:\n- Test with users who have both Google and Outlook calendars\n- Verify proper time zone handling across different calendar sources\n- Test conflict resolution with overlapping events\n- Performance testing with large multi-calendar datasets\n- Error handling when one calendar source is unavailable\n\nThis provides comprehensive multi-platform calendar integration for sophisticated scheduling needs.",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "completed": false,
      "createdAt": "2025-07-29T01:00:57.218Z",
      "updatedAt": "2025-07-29T01:00:57.218Z",
      "dependsOn": [
        "7c0be820-9c03-4042-bfaa-e714a6c0fefb"
      ],
      "priority": 8,
      "complexity": 7,
      "status": "pending",
      "tags": [
        "integration",
        "outlook-calendar",
        "daily-planning",
        "multi-calendar",
        "backend"
      ],
      "estimatedHours": 10,
      "level": 0
    },
    {
      "id": "cb5f5da1-1344-4f5f-b273-6442d9e6de65",
      "name": "Implement Gmail API for AI Task Extraction Context",
      "details": "Implement Gmail API integration to extract email content for AI-powered task extraction and contextual understanding. This enables the AI assistant to analyze email threads and automatically suggest relevant tasks and follow-ups.\n\nAdd to backend/src/integrations/google/google.service.ts:\n- Implement getGmailMessages() method with search capabilities\n- Add getGmailThread() method for retrieving email conversations\n- Implement email content parsing with proper text extraction\n- Add email metadata extraction (sender, subject, importance, labels)\n- Support Gmail search queries and filters for relevant emails\n- Handle email attachments and inline content parsing\n- Add proper error handling for Gmail API rate limits and permissions\n\nEmail processing pipeline:\n- Parse email content to plain text for AI processing\n- Extract action items and deadlines from email content\n- Identify email thread context and conversation flow\n- Handle different email formats (HTML, plain text, rich text)\n- Parse calendar invitations and meeting requests from emails\n- Extract contact information and email signatures\n- Support email labeling and categorization\n\nAI integration workflow:\n- Send email content to OpenAI service for task extraction\n- Generate task suggestions with email context attached\n- Link extracted tasks to original email threads\n- Provide email summary and key action items\n- Support follow-up reminder generation based on email urgency\n- Enable email-to-task conversion with proper metadata inheritance\n\nPrivacy and security:\n- Implement proper email content sanitization\n- Respect user privacy settings and email access permissions\n- Add audit logging for email access and processing\n- Support selective email processing (exclude sensitive folders)\n- Handle encrypted email content appropriately\n- Comply with data retention and privacy regulations\n\nThis enables intelligent email-driven task management and contextual AI assistance.",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "completed": false,
      "createdAt": "2025-07-29T01:01:12.943Z",
      "updatedAt": "2025-07-29T01:01:12.943Z",
      "dependsOn": [],
      "priority": 7,
      "complexity": 8,
      "status": "pending",
      "tags": [
        "integration",
        "gmail",
        "ai-context",
        "email-processing",
        "task-extraction"
      ],
      "estimatedHours": 16,
      "level": 0
    },
    {
      "id": "6f3a2835-3c67-4e89-83be-eb75a8b0c5c0",
      "name": "Implement Outlook Email API for AI Task Extraction",
      "details": "Implement Outlook email API integration using Microsoft Graph to extract email content for AI-powered task extraction and contextual understanding. This provides feature parity with Gmail integration for users in Microsoft ecosystem.\n\nAdd to backend/src/integrations/graph/graph.service.ts:\n- Implement getOutlookMessages() method using Microsoft Graph Mail API\n- Add getOutlookConversation() method for email thread retrieval\n- Implement email content parsing with proper HTML and text extraction\n- Add Outlook-specific metadata extraction (importance, categories, flags)\n- Support Outlook search queries and advanced filtering\n- Handle Outlook email attachments and embedded content\n- Add error handling for Graph API rate limits and mailbox permissions\n\nEmail processing features:\n- Parse Outlook email formats (HTML, RTF, plain text)\n- Extract Outlook-specific metadata (categories, importance levels, follow-up flags)\n- Handle Outlook conversation threading and reply chains\n- Parse meeting requests and calendar invitations from emails\n- Support Outlook folder structure and rules-based filtering\n- Handle encrypted and rights-managed email content\n\nAI integration workflow:\n- Send Outlook email content to OpenAI service for task extraction\n- Generate task suggestions with Outlook email context\n- Link extracted tasks to original Outlook conversations\n- Enable seamless email-to-task conversion with metadata inheritance\n\nThis enables comprehensive email-driven task management for Microsoft ecosystem users.",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "completed": false,
      "createdAt": "2025-07-29T01:01:37.152Z",
      "updatedAt": "2025-07-29T01:01:37.152Z",
      "dependsOn": [],
      "priority": 7,
      "complexity": 8,
      "status": "pending",
      "tags": [
        "integration",
        "outlook-email",
        "microsoft-graph",
        "ai-context",
        "email-processing"
      ],
      "estimatedHours": 16,
      "level": 0
    },
    {
      "id": "2117493e-2030-41a6-9768-f9c173802ad0",
      "name": "Connect Calendar Integration to Frontend Dashboard",
      "details": "Connect the calendar integration from daily planning backend to the frontend Dashboard component, replacing mock calendar data with real calendar events. This provides users with accurate, real-time calendar visualization and scheduling information.\n\nUpdate frontend/src/components/pages/Dashboard.tsx:\n- Remove mock calendar data and connect to real calendar API endpoints\n- Implement real-time calendar sync using React Query\n- Add calendar loading states and error handling with ADHD-friendly messaging\n- Display calendar events alongside task scheduling in unified interface\n- Add calendar conflict indicators and visual warnings for scheduling conflicts\n- Implement calendar refresh functionality with proper cache invalidation\n\nADHD-optimized calendar visualization:\n- Clear visual distinction between calendar events and scheduled tasks\n- Color-coded calendar sources (Google vs Outlook) with consistent iconography\n- Minimal cognitive load with progressive disclosure of calendar details\n- Predictable interaction patterns for calendar event exploration\n- High contrast visual indicators for urgent calendar conflicts\n- Consistent loading states that don't cause visual anxiety\n\nCalendar integration features:\n- Display upcoming calendar events in today's plan view\n- Show calendar availability alongside task scheduling recommendations\n- Implement calendar event quick actions (view details, reschedule, create related task)\n- Add calendar sync status indicators with clear success/error states\n- Support multiple calendar source toggle (show/hide Google/Outlook calendars)\n\nError handling and accessibility:\n- Graceful degradation when calendar APIs are unavailable\n- Clear error messages for calendar permission issues\n- Screen reader support for calendar event information\n- Keyboard navigation for calendar interactions\n- Focus management for calendar modal/popup interactions\n\nThis completes the calendar integration user experience.",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "completed": false,
      "createdAt": "2025-07-29T01:01:54.034Z",
      "updatedAt": "2025-07-29T01:01:54.034Z",
      "dependsOn": [
        "d6d49499-dc6d-4756-8765-4ecd0c8f4fed",
        "2ff625bf-31dd-4cee-8129-1421fae2828e"
      ],
      "priority": 8,
      "complexity": 6,
      "status": "pending",
      "tags": [
        "frontend",
        "calendar-integration",
        "dashboard",
        "adhd-ux",
        "real-time"
      ],
      "estimatedHours": 8,
      "level": 0
    },
    {
      "id": "148cc760-32d0-4a7f-82b7-5d6152f5b039",
      "name": "Implement Mem0 Semantic Memory Integration",
      "details": "Implement Mem0 semantic memory integration to provide contextual AI responses and intelligent task suggestions based on user interaction history. This enables the AI assistant to learn user preferences and provide increasingly personalized recommendations.\n\nCreate backend/src/ai/mem0.service.ts:\n- Implement Mem0 client configuration and initialization\n- Add interaction logging with proper context extraction\n- Implement semantic search across user interaction history\n- Create memory storage for user preferences, patterns, and context\n- Add retrieval-augmented generation (RAG) pipeline for contextual responses\n- Implement memory cleanup and retention policies\n\nMemory storage components:\n- Store user task creation patterns and preferences\n- Log AI interaction context and user feedback\n- Track task completion patterns and energy level correlations\n- Store project context and user work patterns\n- Remember user scheduling preferences and calendar patterns\n- Archive email context and task extraction accuracy feedback\n\nRAG pipeline implementation:\n- Vector store setup using Chroma or FAISS for semantic search\n- Embedding generation for user interactions and context\n- Similarity search for relevant context retrieval\n- Context injection into AI prompts for personalized responses\n- Memory relevance scoring and context ranking\n- Real-time memory updates based on user interactions\n\nAI enhancement features:\n- Personalized task suggestions based on historical patterns\n- Context-aware responses using past interaction history\n- Adaptive scheduling recommendations based on user behavior\n- Intelligent project categorization using learned preferences\n- Proactive task suggestions based on email and calendar context\n\nThis establishes the foundation for truly intelligent, personalized AI assistance.",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "completed": false,
      "createdAt": "2025-07-29T01:02:10.374Z",
      "updatedAt": "2025-07-29T01:02:10.374Z",
      "dependsOn": [],
      "priority": 6,
      "complexity": 9,
      "status": "pending",
      "tags": [
        "ai",
        "mem0",
        "semantic-memory",
        "rag",
        "personalization"
      ],
      "estimatedHours": 20,
      "level": 0
    },
    {
      "id": "17eaeccf-2e6b-4eed-adc0-9f6de876ae4f",
      "name": "Implement Real-time Notification System",
      "details": "Implement comprehensive real-time notification system using WebSockets to provide timely reminders, calendar alerts, and task notifications. This ensures users stay informed about critical deadlines and schedule changes with ADHD-friendly notification patterns.\n\nCreate backend/src/notifications/notifications.service.ts:\n- Implement WebSocket gateway for real-time communication\n- Add notification queue management with priority handling\n- Create notification types (task reminders, calendar alerts, deadline warnings)\n- Implement user notification preferences and delivery settings\n- Add notification history and delivery tracking\n- Create notification templates with personalization\n\nWebSocket implementation:\n- Set up Socket.IO for reliable real-time communication\n- Implement user authentication for WebSocket connections\n- Add connection management and automatic reconnection\n- Create notification broadcasting for multiple user sessions\n- Handle offline notification queueing and delivery\n- Implement notification acknowledgment and read receipts\n\nADHD-optimized notification features:\n- Gentle notification delivery without overwhelming users\n- Customizable notification timing and frequency settings\n- Visual and audio notification options with user preference\n- Notification batching to reduce interruption frequency\n- Focus mode that suppresses non-critical notifications\n- Clear notification categorization with importance levels\n\nThis provides essential real-time awareness for effective task and time management.",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "completed": false,
      "createdAt": "2025-07-29T01:02:35.303Z",
      "updatedAt": "2025-07-29T01:02:35.303Z",
      "dependsOn": [],
      "priority": 6,
      "complexity": 8,
      "status": "pending",
      "tags": [
        "notifications",
        "websockets",
        "real-time",
        "adhd-ux",
        "backend"
      ],
      "estimatedHours": 14,
      "level": 0
    },
    {
      "id": "e4f69460-141a-4d60-af74-70db452acca7",
      "name": "Implement Reflection and Feedback Loop Features",
      "details": "Implement reflection and feedback loop features to help users develop self-awareness and improve task management effectiveness. This includes daily reflection prompts, journaling capabilities, and productivity insights with ADHD-friendly design patterns.\n\nCreate backend/src/reflection/reflection.service.ts:\n- Implement daily reflection prompt generation with personalized questions\n- Add reflection response storage and analysis\n- Create productivity insights based on task completion patterns\n- Implement journaling functionality with rich text support\n- Add reflection streak tracking and encouragement features\n- Create reflection analytics and progress visualization\n\nReflection features:\n- Daily reflection prompts based on task completion and energy levels\n- Weekly reflection summaries with productivity insights\n- Goal alignment checking (\"Was this aligned with your priorities?\")\n- Energy level reflection and pattern recognition\n- Task difficulty and time estimation accuracy feedback\n- Project progress reflection and course correction prompts\n\nADHD-optimized reflection design:\n- Short, focused reflection questions to avoid cognitive overload\n- Optional reflection with gentle encouragement, not pressure\n- Visual progress indicators and celebration of small wins\n- Flexible reflection timing to accommodate varying schedules\n- Positive framing and strengths-based reflection approach\n- Integration with user energy patterns for optimal reflection timing\n\nFrontend implementation:\n- Reflection modal with calming, distraction-free design\n- Daily reflection prompt in dashboard with dismissible interface\n- Reflection history view with search and filtering capabilities\n- Productivity insights dashboard with ADHD-friendly visualizations\n- Journaling interface with autosave and offline support\n\nThis supports user growth and self-awareness development through structured reflection.",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "completed": false,
      "createdAt": "2025-07-29T01:02:50.429Z",
      "updatedAt": "2025-07-29T01:02:50.429Z",
      "dependsOn": [],
      "priority": 5,
      "complexity": 7,
      "status": "pending",
      "tags": [
        "reflection",
        "feedback",
        "journaling",
        "adhd-ux",
        "self-awareness"
      ],
      "estimatedHours": 12,
      "level": 0
    },
    {
      "id": "ef388a66-739a-4e2c-bf91-8a7c7e0516c7",
      "name": "Build Calendar View Component with ADHD-friendly Design",
      "details": "Build comprehensive calendar view component with ADHD-friendly design patterns for visualizing tasks and calendar events in daily, weekly, and monthly views. This provides users with intuitive time visualization and drag-and-drop scheduling capabilities.\n\nCreate frontend/src/components/ui/CalendarView.tsx:\n- Implement daily, weekly, and monthly calendar view modes\n- Add drag-and-drop task scheduling with visual feedback\n- Display calendar events alongside scheduled tasks with clear differentiation\n- Implement time slot visualization with energy level color coding\n- Add calendar navigation with keyboard support and clear visual indicators\n- Support responsive design for mobile and desktop viewing\n\nADHD-optimized calendar design:\n- Clear visual hierarchy with minimal cognitive load\n- Consistent color coding for task types and energy levels\n- High contrast design with customizable theme support\n- Predictable interaction patterns with clear affordances\n- Focus indicators and keyboard navigation support\n- Progressive disclosure to avoid overwhelming information density\n\nCalendar features:\n- Integration with real calendar data from Google/Outlook\n- Visual time blocking with task duration estimates\n- Calendar conflict indicators with clear warning states\n- Drag-and-drop task rescheduling with confirmation\n- Quick task creation directly in calendar time slots\n- Calendar event details popup with task creation option\n\nPlaywright testing:\n- E2E tests for calendar view navigation and interaction\n- Drag-and-drop functionality testing across different browsers\n- Accessibility testing with screen readers and keyboard navigation\n- Responsive design testing across device sizes\n- Performance testing with large calendar datasets\n- Visual regression testing for calendar layout consistency\n\nThis completes the calendar integration user experience with full visual scheduling capabilities.",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "completed": false,
      "createdAt": "2025-07-29T01:03:09.810Z",
      "updatedAt": "2025-07-29T01:03:09.810Z",
      "dependsOn": [
        "2117493e-2030-41a6-9768-f9c173802ad0"
      ],
      "priority": 7,
      "complexity": 6,
      "status": "pending",
      "tags": [
        "frontend",
        "calendar-view",
        "adhd-ux",
        "drag-drop",
        "playwright"
      ],
      "estimatedHours": 10,
      "level": 0
    },
    {
      "id": "12e815c5-84b7-4669-86f0-5cfa5d7d11bf",
      "name": "Design Google Calendar Integration Architecture",
      "details": "Design the integration architecture between GoogleService and DailyPlannerService. Define interfaces, data flow, and error handling patterns for calendar integration. Create technical specification for getExistingCommitments() method and calendar event parsing logic.\n\nArchitecture components to design:\n- Interface between GoogleService and DailyPlannerService\n- Data transformation layer from Google Calendar events to TimeSlot format\n- Error handling patterns for calendar API failures\n- Calendar event privacy and access control considerations\n- Performance optimization strategies for calendar data fetching\n\nTechnical specifications to create:\n- getExistingCommitments() method signature and return types\n- Calendar event parsing logic for different event types (meetings, all-day, recurring)\n- Energy level inference rules for different calendar event types\n- Time zone handling and date range specifications\n- Caching strategy for calendar data to minimize API calls\n\nDesign deliverables:\n- Technical design document with architecture diagrams\n- Interface definitions and TypeScript type declarations\n- Error handling flow charts and fallback strategies\n- Performance requirements and optimization approach\n- Integration testing strategy and mock data structures\n\nThis design phase ensures clear architecture before implementation and reduces complexity in subsequent development tasks.",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "parentId": "d6d49499-dc6d-4756-8765-4ecd0c8f4fed",
      "completed": true,
      "createdAt": "2025-07-29T01:09:45.595Z",
      "updatedAt": "2025-07-29T01:27:24.316Z",
      "dependsOn": [],
      "priority": 9,
      "complexity": 3,
      "status": "done",
      "tags": [
        "design",
        "architecture",
        "google-calendar",
        "integration",
        "planning"
      ],
      "estimatedHours": 4,
      "level": 1,
      "actualHours": 4
    },
    {
      "id": "92f8e463-a50c-435e-a242-df17f90e9ad4",
      "name": "Implement Google Calendar Event Fetching",
      "details": "Implement the core getExistingCommitments() method in daily-planner.service.ts. Add GoogleService dependency injection, implement calendar event fetching for target date, and basic calendar event parsing into TimeSlot format.\n\nImplementation tasks:\n- Add GoogleService dependency injection to DailyPlannerService constructor\n- Implement getExistingCommitments() method with proper error handling\n- Add calendar event fetching logic for specified date range\n- Implement basic calendar event to TimeSlot transformation\n- Handle different Google Calendar event types (timed events, all-day events)\n- Add proper TypeScript typing for calendar integration\n\nCore functionality:\n- Fetch Google Calendar events for target date using GoogleService.getCalendarEvents()\n- Parse event start/end times and convert to TimeSlot format\n- Handle recurring events and event series properly\n- Extract event metadata (title, description, attendees) for context\n- Map event types to initial energy level estimates\n- Filter out declined or cancelled events\n\nData transformation:\n- Convert Google Calendar event datetime to consistent timezone format\n- Map calendar events to TimeSlot interface with proper properties\n- Handle edge cases like all-day events and multi-day events\n- Preserve original calendar event IDs for future reference\n- Add calendar source metadata to TimeSlot objects\n\nThis establishes the core integration between Google Calendar API and the daily planning system.",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "parentId": "d6d49499-dc6d-4756-8765-4ecd0c8f4fed",
      "completed": true,
      "createdAt": "2025-07-29T01:10:00.751Z",
      "updatedAt": "2025-07-29T01:31:28.838Z",
      "dependsOn": [
        "12e815c5-84b7-4669-86f0-5cfa5d7d11bf"
      ],
      "priority": 9,
      "complexity": 4,
      "status": "done",
      "tags": [
        "implementation",
        "google-calendar",
        "backend",
        "api-integration",
        "core"
      ],
      "estimatedHours": 4,
      "level": 1,
      "actualHours": 0.5
    },
    {
      "id": "286c6b62-c861-4c27-91a8-7b9ce1cb1bf7",
      "name": "Integrate Calendar Events with Time Slot Generation",
      "details": "Modify generateTimeSlots() method to account for calendar commitments. Implement calendar event conflict detection, time blocking logic, and energy level mapping for meetings vs focus work. Update task assignment algorithm to avoid scheduling over calendar events.\n\nIntegration modifications:\n- Update generateTimeSlots() to call getExistingCommitments() and merge calendar data\n- Implement time slot blocking logic for calendar events\n- Add calendar conflict detection between events and available time slots\n- Update energy level mapping based on calendar event types and context\n- Modify task assignment algorithm to respect calendar commitments\n\nCalendar-aware scheduling logic:\n- Block time slots that overlap with calendar events\n- Implement buffer time around meetings (5-10 minutes before/after)\n- Map meeting types to energy levels (focus meetings vs social calls)\n- Handle different calendar event priorities and importance levels\n- Add logic for respecting calendar event privacy settings\n\nAdvanced scheduling features:\n- Implement smart scheduling around calendar patterns\n- Add support for calendar event categories and energy mapping\n- Handle travel time between calendar events if location data available\n- Implement preference-based scheduling around certain event types\n- Add calendar density analysis for optimal task placement\n\nAlgorithm enhancements:\n- Update task scoring to consider calendar context and proximity\n- Implement calendar-aware time slot optimization\n- Add metrics for calendar integration effectiveness\n- Update DailyPlan response to include calendar sync status\n\nThis connects calendar data directly to the intelligent scheduling algorithm.",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "parentId": "d6d49499-dc6d-4756-8765-4ecd0c8f4fed",
      "completed": true,
      "createdAt": "2025-07-29T01:10:17.197Z",
      "updatedAt": "2025-07-29T01:32:54.224Z",
      "dependsOn": [
        "92f8e463-a50c-435e-a242-df17f90e9ad4"
      ],
      "priority": 9,
      "complexity": 4,
      "status": "done",
      "tags": [
        "integration",
        "scheduling",
        "algorithm",
        "time-slots",
        "calendar-logic"
      ],
      "estimatedHours": 4,
      "level": 1,
      "actualHours": 0.5
    },
    {
      "id": "585a9b1b-9cf4-4e6a-824e-73691e3e3da6",
      "name": "Add Calendar Integration Error Handling and Logging",
      "details": "Implement comprehensive error handling for Google Calendar API failures with graceful degradation. Add detailed logging for calendar integration debugging, handle API rate limits, and implement fallback behavior when calendar is unavailable.\n\nError handling implementation:\n- Add try-catch blocks around all Google Calendar API calls\n- Implement graceful degradation when calendar API is unavailable\n- Handle specific Google Calendar API error codes and rate limits\n- Add retry logic with exponential backoff for transient failures\n- Implement fallback scheduling when calendar integration fails\n\nLogging and monitoring:\n- Add comprehensive logging for calendar integration debugging\n- Log calendar API response times and success/failure rates\n- Implement calendar sync status tracking and reporting\n- Add metrics for calendar integration performance monitoring\n- Create audit trail for calendar data access and processing\n\nProduction resilience:\n- Handle network timeouts and connectivity issues gracefully\n- Implement circuit breaker pattern for calendar API calls\n- Add health check endpoint for calendar integration status\n- Handle OAuth token expiration and refresh scenarios\n- Implement proper error messages for different failure scenarios\n\nFallback strategies:\n- Continue daily planning without calendar data when API fails\n- Use cached calendar data when real-time access is unavailable\n- Provide clear user feedback about calendar integration status\n- Implement manual calendar override options for critical scenarios\n\nThis ensures the calendar integration is production-ready and resilient.",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "parentId": "d6d49499-dc6d-4756-8765-4ecd0c8f4fed",
      "completed": true,
      "createdAt": "2025-07-29T01:10:31.331Z",
      "updatedAt": "2025-07-29T01:35:55.658Z",
      "dependsOn": [
        "286c6b62-c861-4c27-91a8-7b9ce1cb1bf7"
      ],
      "priority": 8,
      "complexity": 3,
      "status": "done",
      "tags": [
        "error-handling",
        "logging",
        "resilience",
        "production",
        "monitoring"
      ],
      "estimatedHours": 3,
      "level": 1,
      "actualHours": 3
    },
    {
      "id": "22282f4b-cabb-4c4c-b897-24ddd501e77c",
      "name": "Test Google Calendar Integration",
      "details": "Create comprehensive test suite for calendar integration including unit tests with mocked Google Calendar responses, integration tests with real calendar data, error handling tests for API failures, and performance tests with large calendar datasets.\n\nUnit testing implementation:\n- Create mocked Google Calendar API responses for various event types\n- Test getExistingCommitments() method with different calendar scenarios\n- Unit test calendar event parsing logic with edge cases\n- Test time slot generation with calendar integration enabled\n- Mock calendar API failures and test error handling paths\n\nIntegration testing:\n- Set up test environment with real Google Calendar test account\n- Test full calendar integration workflow end-to-end\n- Verify calendar event blocking and time slot generation\n- Test OAuth authentication and token refresh scenarios\n- Validate calendar event conflict detection and resolution\n\nError handling tests:\n- Test behavior when Google Calendar API is unavailable\n- Verify graceful degradation and fallback mechanisms\n- Test API rate limiting and retry logic\n- Validate error messages and user feedback\n- Test OAuth token expiration and refresh scenarios\n\nPerformance testing:\n- Test calendar integration with large calendar datasets (100+ events)\n- Measure calendar API response times and optimization effectiveness\n- Test concurrent calendar access and caching behavior\n- Validate memory usage and resource optimization\n- Test calendar integration under high load scenarios\n\nThis ensures robust, reliable calendar integration ready for production use.",
      "projectId": "e9ea941b-e0b7-401f-b32b-65799792e150",
      "parentId": "d6d49499-dc6d-4756-8765-4ecd0c8f4fed",
      "completed": true,
      "createdAt": "2025-07-29T01:10:45.533Z",
      "updatedAt": "2025-07-29T01:42:19.463Z",
      "priority": 8,
      "complexity": 4,
      "status": "done",
      "tags": [
        "testing",
        "unit-tests",
        "integration-tests",
        "performance",
        "quality"
      ],
      "estimatedHours": 4,
      "level": 1,
      "actualHours": 1.5
    }
  ],
  "subtasks": [],
  "migration": {
    "version": "1.8.1",
    "migratedAt": "2025-07-27T21:40:36.351Z",
    "subtasksMigrated": 1
  }
}