{
  "id": "cd07c99a-728d-43fe-ab75-e67d3722f156",
  "title": "Daily Planning Algorithm - Research Findings",
  "details": "## Energy-Aware Daily Planning Algorithm Research\n\n### Core Algorithm Components\nBased on research and existing Helmsman documentation, the daily planning algorithm requires these key components:\n\n**1. Task Scoring System (Alpha-Beta-Gamma Model)**\n- Priority weight (40%): priority * 8 points\n- Deadline urgency (30%): higher scores for tasks due soon\n- Energy level match (20%): bonus when task energy matches slot energy  \n- Focus type efficiency (10%): bonus for batching similar work types\n- Formula: Score = (A * Priority) + (B * DeadlineUrgency) + (G * EnergyMatch) + FocusBatch\n\n**2. Dependency Resolution Engine**\n- Use topological sort to detect dependency chains\n- Implement circular dependency detection using DFS traversal\n- Filter out blocked tasks that have incomplete prerequisites\n- Handle implicit dependencies by same assignee\n- Key insight: Tasks form a directed acyclic graph (DAG)\n\n**3. Time Slot Generation**\n- Map user energy patterns to time periods (morning=HIGH, afternoon=MEDIUM, evening=LOW)\n- Account for existing commitments and meetings\n- Create TimeSlot objects with startTime, endTime, energyLevel, preferredFocusTypes\n- Support different user energy patterns (night owls vs early birds)\n\n**4. Task-to-Slot Assignment**\n- Greedy assignment with optimization scoring\n- Respect hard deadlines as constraints\n- Batch similar focus types for cognitive efficiency\n- Handle overcommitment detection and task deferral\n\n### Implementation Architecture\n**File Structure:**\n- `backend/src/planning/daily-planner.service.ts` - Main service\n- `backend/src/planning/dto/` - Input/output interfaces\n- `backend/src/planning/types.ts` - Algorithm types\n- `backend/src/planning/daily-planner.service.spec.ts` - Comprehensive tests\n\n**Key Classes & Interfaces:**\n```typescript\ninterface PlanningInput {\n  userId: string;\n  date: Date;\n  availableTasks: Task[];\n  userSettings: UserSettings;\n  workingHours: TimeSlot[];\n  existingCommitments: TimeSlot[];\n}\n\ninterface DailyPlan {\n  date: string;\n  scheduleBlocks: ScheduleBlock[];\n  unscheduledTasks: Task[];\n  energyOptimization: number;\n  focusOptimization: number;\n  deadlineRisk: number;\n}\n\nclass DailyPlannerService {\n  generatePlan(input: PlanningInput): Promise<DailyPlan>\n  calculateTaskScore(task: Task, timeSlot: TimeSlot): number\n  resolveTaskDependencies(tasks: Task[]): Task[]\n  generateTimeSlots(date: Date, userSettings: UserSettings): TimeSlot[]\n  assignTasksToSlots(tasks: Task[], slots: TimeSlot[]): ScheduleAssignment[]\n}\n```\n\n### Algorithm Weights (Research-Based)\n- **Priority Factor**: 40% (8 points per priority level 1-5)\n- **Deadline Factor**: 30% (30 points max, decreases with days until deadline)\n- **Energy Match**: 20% (HIGH=20pts, MEDIUM=15pts, LOW=10pts when matched)\n- **Focus Batching**: 10% (CREATIVE=8pts, TECHNICAL=8pts, SOCIAL=10pts, ADMIN=6pts)\n\n### Dependency Resolution Strategy\n1. Build directed graph from task dependencies\n2. Use topological sort to get execution order\n3. Detect circular dependencies with DFS cycle detection\n4. Filter tasks with incomplete prerequisites\n5. Return only schedulable tasks\n\n### Time Complexity Considerations\n- Task scoring: O(n) where n = number of tasks\n- Dependency resolution: O(V + E) where V=tasks, E=dependencies\n- Slot assignment: O(n * m) where n=tasks, m=time slots\n- Overall complexity: O(n * m) for typical workloads\n\n### Performance Optimizations\n- Cache user settings and energy patterns\n- Pre-compute time slots for common working patterns\n- Use efficient data structures for dependency graphs\n- Implement early termination for overcommitted schedules\n\n### Testing Strategy\n- Unit tests for each algorithm component\n- Integration tests with various user patterns\n- Performance tests with 100+ tasks\n- Edge cases: no tasks, all blocked, overcommitted, circular dependencies",
  "category": "task_research",
  "dateCreated": "2025-07-28T16:21:53.636Z",
  "dateUpdated": "2025-07-28T16:21:53.636Z"
}
