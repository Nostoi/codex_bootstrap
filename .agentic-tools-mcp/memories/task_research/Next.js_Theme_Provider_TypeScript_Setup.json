{
  "id": "e5fed7f3-040b-49c1-b650-41b759955b80",
  "title": "Next.js Theme Provider TypeScript Setup",
  "details": "## Next.js Theme Provider with TypeScript Implementation\n\n### Technology Stack:\n- **next-themes**: Industry standard for React/Next.js theme management\n- **TypeScript**: Type-safe theme definitions and provider setup\n- **shadcn/ui**: Recommended integration pattern\n\n### Implementation Pattern:\n\n1. **Installation**\n   ```bash\n   pnpm add next-themes\n   ```\n\n2. **Theme Provider Setup**\n   ```typescript\n   // components/theme-provider.tsx\n   import { ThemeProvider as NextThemesProvider } from \"next-themes\"\n   import type { ThemeProviderProps } from \"next-themes/dist/types\"\n   \n   export function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n     return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n   }\n   ```\n\n3. **Root Layout Integration**\n   ```typescript\n   // app/layout.tsx\n   import { ThemeProvider } from \"@/components/theme-provider\"\n   \n   export default function RootLayout({ children }) {\n     return (\n       <html lang=\"en\" suppressHydrationWarning>\n         <body>\n           <ThemeProvider\n             attribute=\"class\"\n             defaultTheme=\"system\"\n             enableSystem\n             disableTransitionOnChange\n           >\n             {children}\n           </ThemeProvider>\n         </body>\n       </html>\n     )\n   }\n   ```\n\n4. **Theme Toggle Implementation**\n   ```typescript\n   import { useTheme } from \"next-themes\"\n   \n   export function ThemeToggle() {\n     const { setTheme, theme } = useTheme()\n     \n     return (\n       <DropdownMenu>\n         <DropdownMenuTrigger asChild>\n           <Button variant=\"outline\" size=\"icon\">\n             <span className=\"sr-only\">Toggle theme</span>\n           </Button>\n         </DropdownMenuTrigger>\n         <DropdownMenuContent align=\"end\">\n           <DropdownMenuItem onClick={() => setTheme(\"light\")}>Light</DropdownMenuItem>\n           <DropdownMenuItem onClick={() => setTheme(\"dark\")}>Dark</DropdownMenuItem>\n           <DropdownMenuItem onClick={() => setTheme(\"system\")}>System</DropdownMenuItem>\n         </DropdownMenuContent>\n       </DropdownMenu>\n     )\n   }\n   ```\n\n### Key Configuration Options:\n- `attribute=\"class\"`: Uses class-based theme switching\n- `defaultTheme=\"system\"`: Respects user's OS preference\n- `enableSystem`: Allows system theme detection\n- `disableTransitionOnChange`: Prevents flash during theme switch\n- `suppressHydrationWarning`: Prevents Next.js hydration warnings\n\n### TypeScript Integration:\n- Strong typing with ThemeProviderProps\n- Type-safe theme definitions in separate themes.ts file\n- Proper export/import patterns for reusability\n\n### Best Practices:\n- Use system theme as default for accessibility\n- Implement proper loading states to prevent flash\n- Ensure theme persistence across sessions\n- Test with screen readers for accessibility compliance",
  "category": "task_research",
  "dateCreated": "2025-07-27T23:24:36.783Z",
  "dateUpdated": "2025-07-27T23:24:36.783Z"
}