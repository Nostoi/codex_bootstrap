# Production-optimized Frontend Dockerfile for Codex Bootstrap
# Multi-stage build for optimal performance and security

# Dependencies stage
FROM node:20-alpine AS deps
WORKDIR /app

# Install pnpm globally
RUN npm install -g pnpm

RUN apk add --no-cache libc6-compat

# Copy package files
COPY frontend/package*.json ./
COPY frontend/pnpm-lock.yaml ./
RUN pnpm install --frozen-lockfile

# Builder stage
FROM node:20-alpine AS builder
WORKDIR /app

# Install pnpm globally
RUN npm install -g pnpm

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules

# Copy source code
COPY frontend/ ./

# Build the application with optimizations
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
RUN pnpm run build

# Production runner stage
FROM node:20-alpine AS runner
WORKDIR /app

# Create non-root user for security
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Install production dependencies and security tools
RUN apk add --no-cache \
    curl \
    tini \
    dumb-init \
    && rm -rf /var/cache/apk/*

# Set security labels
LABEL security.scan.enabled="true" \
      security.non-root="true" \
      security.no-new-privileges="true" \
      org.opencontainers.image.title="Codex Bootstrap Frontend" \
      org.opencontainers.image.description="AI-augmented task management frontend"

# Copy built application and dependencies
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static

# Change ownership to non-root user
RUN chown -R nextjs:nodejs /app

# Switch to non-root user
USER nextjs

# Set environment variables for security and performance
ENV NODE_ENV=production \
    NEXT_TELEMETRY_DISABLED=1 \
    PORT=3000 \
    HOSTNAME="0.0.0.0" \
    NODE_OPTIONS="--max-old-space-size=512" \
    NPM_CONFIG_UPDATE_NOTIFIER=false

# Security: Disable new privileges
ENV SECURITY_NON_ROOT=true \
    SECURITY_NO_NEW_PRIVILEGES=true

# Add comprehensive health check
HEALTHCHECK --interval=15s --timeout=5s --start-period=10s --retries=3 \
  CMD curl -f http://localhost:3000/api/health || exit 1

# Expose port
EXPOSE 3000

# Use tini as init system for proper signal handling
ENTRYPOINT ["/sbin/tini", "--"]

# Start the application
CMD ["node", "server.js"]
