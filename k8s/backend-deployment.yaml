apiVersion: apps/v1
kind: Deployment
metadata:
  name: codex-backend
  namespace: codex-bootstrap
  labels:
    app: codex-backend
    version: v1.0.0
    component: api-server
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  selector:
    matchLabels:
      app: codex-backend
  template:
    metadata:
      labels:
        app: codex-backend
        version: v1.0.0
        component: api-server
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
        - name: backend
          image: codex-backend:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8000
              name: http
              protocol: TCP
            - containerPort: 8001
              name: websocket
              protocol: TCP
          env:
            - name: NODE_ENV
              value: "production"
            - name: PORT
              value: "8000"
            - name: WEBSOCKET_PORT
              value: "8001"
            # Feature Flags Configuration
            - name: FF_ENHANCED_TASK_METADATA
              valueFrom:
                configMapKeyRef:
                  name: feature-flags-config
                  key: enhanced-task-metadata
            - name: FF_AI_TASK_EXTRACTION
              valueFrom:
                configMapKeyRef:
                  name: feature-flags-config
                  key: ai-task-extraction
            - name: FF_DAILY_PLANNING
              valueFrom:
                configMapKeyRef:
                  name: feature-flags-config
                  key: daily-planning
            - name: FF_MEM0_INTEGRATION
              valueFrom:
                configMapKeyRef:
                  name: feature-flags-config
                  key: mem0-integration
            - name: FF_ADVANCED_AI_FEATURES
              valueFrom:
                configMapKeyRef:
                  name: feature-flags-config
                  key: advanced-ai-features
            # Database Configuration
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: database-secret
                  key: url
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: auth-secret
                  key: jwt-secret
            - name: OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: openai-secret
                  key: api-key
            # OAuth Configuration
            - name: GOOGLE_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: oauth-secret
                  key: google-client-id
            - name: GOOGLE_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: oauth-secret
                  key: google-client-secret
            - name: MICROSOFT_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: oauth-secret
                  key: microsoft-client-id
            - name: MICROSOFT_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: oauth-secret
                  key: microsoft-client-secret
            - name: CORS_ORIGIN
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: cors-origin
          resources:
            limits:
              memory: "2Gi"
              cpu: "1000m"
            requests:
              memory: "1Gi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /health
              port: 8000
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
            successThreshold: 1
          readinessProbe:
            httpGet:
              path: /health
              port: 8000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
          startupProbe:
            httpGet:
              path: /health
              port: 8000
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: codex-backend
  namespace: codex-bootstrap
  labels:
    app: codex-backend
    component: api-server
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app: codex-backend
  ports:
    - protocol: TCP
      port: 8000
      targetPort: 8000
      name: http
    - protocol: TCP
      port: 8001
      targetPort: 8001
      name: websocket
  type: ClusterIP
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: codex-backend-hpa
  namespace: codex-bootstrap
  labels:
    app: codex-backend
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: codex-backend
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 50
          periodSeconds: 300
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 100
          periodSeconds: 60
