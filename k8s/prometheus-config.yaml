apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: codex-bootstrap
  labels:
    app: prometheus
    component: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'codex-bootstrap'
        environment: 'production'

    rule_files:
      - "/etc/prometheus/rules/*.yml"

    alerting:
      alertmanagers:
        - static_configs:
            - targets: []

    scrape_configs:
      # Prometheus itself
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']

      # Kubernetes API server
      - job_name: 'kubernetes-apiserver'
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https

      # Kubernetes nodes
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics

      # Kubernetes pods
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name

      # Codex Backend
      - job_name: 'codex-backend'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - codex-bootstrap
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: codex-backend
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: http
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
        metrics_path: /metrics
        scrape_interval: 30s

      # Codex Frontend
      - job_name: 'codex-frontend'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - codex-bootstrap
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: codex-frontend
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: http
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
        metrics_path: /api/metrics
        scrape_interval: 30s

      # PostgreSQL
      - job_name: 'postgresql'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - codex-bootstrap
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: postgresql
        metrics_path: /metrics
        scrape_interval: 30s

  alerts.yml: |
    groups:
      - name: codex-bootstrap
        rules:
          # High CPU usage
          - alert: HighCPUUsage
            expr: 100 - (avg by(instance) (irate(node_cpu_seconds_total{mode="idle"}[5m])) * 100) > 80
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High CPU usage detected"
              description: "CPU usage is above 80% for more than 5 minutes"

          # High memory usage
          - alert: HighMemoryUsage
            expr: (1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100 > 85
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High memory usage detected"
              description: "Memory usage is above 85% for more than 5 minutes"

          # Pod crashes
          - alert: PodCrashLooping
            expr: rate(kube_pod_container_status_restarts_total[15m]) > 0
            for: 5m
            labels:
              severity: critical
            annotations:
              summary: "Pod is crash looping"
              description: "Pod {{ $labels.pod }} in namespace {{ $labels.namespace }} is crash looping"

          # Backend service down
          - alert: BackendServiceDown
            expr: up{job="codex-backend"} == 0
            for: 2m
            labels:
              severity: critical
            annotations:
              summary: "Backend service is down"
              description: "The backend service has been down for more than 2 minutes"

          # Frontend service down
          - alert: FrontendServiceDown
            expr: up{job="codex-frontend"} == 0
            for: 2m
            labels:
              severity: critical
            annotations:
              summary: "Frontend service is down"
              description: "The frontend service has been down for more than 2 minutes"

          # Database connection issues
          - alert: DatabaseConnectionIssues
            expr: up{job="postgresql"} == 0
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "Database connection issues"
              description: "Unable to connect to PostgreSQL database"

          # High response time
          - alert: HighResponseTime
            expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 2
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High response time detected"
              description: "95th percentile response time is above 2 seconds"

          # Disk space usage
          - alert: DiskSpaceUsage
            expr: (1 - (node_filesystem_avail_bytes / node_filesystem_size_bytes)) * 100 > 85
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High disk usage detected"
              description: "Disk usage is above 85% for more than 5 minutes"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: codex-bootstrap
  labels:
    app: grafana
    component: monitoring
data:
  datasources.yml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus:9090
        isDefault: true
        editable: false

  dashboards.yml: |
    apiVersion: 1
    providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        editable: true
        updateIntervalSeconds: 10
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards

  codex-dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Codex Bootstrap Dashboard",
        "tags": ["codex", "production"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Backend Response Time",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{job=\"codex-backend\"}[5m]))",
                "legendFormat": "95th percentile"
              }
            ],
            "yAxes": [
              {
                "label": "Response Time (s)",
                "min": 0
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 0,
              "y": 0
            }
          },
          {
            "id": 2,
            "title": "Request Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(http_requests_total{job=\"codex-backend\"}[5m])",
                "legendFormat": "Requests/sec"
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 12,
              "y": 0
            }
          },
          {
            "id": 3,
            "title": "Memory Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "process_resident_memory_bytes{job=\"codex-backend\"}",
                "legendFormat": "Backend Memory"
              },
              {
                "expr": "process_resident_memory_bytes{job=\"codex-frontend\"}",
                "legendFormat": "Frontend Memory"
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 0,
              "y": 8
            }
          },
          {
            "id": 4,
            "title": "CPU Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(process_cpu_seconds_total{job=\"codex-backend\"}[5m]) * 100",
                "legendFormat": "Backend CPU %"
              },
              {
                "expr": "rate(process_cpu_seconds_total{job=\"codex-frontend\"}[5m]) * 100",
                "legendFormat": "Frontend CPU %"
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 12,
              "y": 8
            }
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "30s"
      }
    }
