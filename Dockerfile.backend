# Production-optimized Backend Dockerfile for Codex Bootstrap
# Multi-stage build for security and performance

# Build stage
FROM node:20-alpine AS builder
WORKDIR /app

# Install pnpm globally
RUN npm install -g pnpm

# Install build dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    openssl \
    bash

# Copy package files
COPY backend/package*.json ./
COPY backend/pnpm-lock.yaml ./
COPY backend/prisma ./prisma

# Install all dependencies (including dev dependencies for build)
RUN pnpm install --frozen-lockfile

# Copy source code
COPY backend/ ./

# Generate Prisma client
RUN pnpm exec prisma generate

# Build the application
RUN pnpm run build

# Production stage
FROM node:20-alpine AS production
WORKDIR /app

# Install pnpm globally
RUN npm install -g pnpm

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nestjs -u 1001

# Install production dependencies and security tools
RUN apk add --no-cache \
    openssl \
    bash \
    curl \
    tini \
    dumb-init \
    && rm -rf /var/cache/apk/*

# Set security labels
LABEL security.scan.enabled="true" \
      security.non-root="true" \
      security.no-new-privileges="true" \
      org.opencontainers.image.title="Codex Bootstrap Backend" \
      org.opencontainers.image.description="AI-augmented task management backend"

# Copy package files and install production dependencies only
COPY backend/package*.json ./
COPY backend/pnpm-lock.yaml ./
COPY --from=builder /app/prisma ./prisma
RUN pnpm install --prod --frozen-lockfile && pnpm store prune

# Generate Prisma client in production stage
RUN pnpm exec prisma generate

# Copy built application from builder stage
COPY --from=builder /app/dist ./dist

# Install wait-for-it for database readiness
ADD https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh /wait-for-it.sh
RUN chmod +x /wait-for-it.sh

# Change ownership to non-root user
RUN chown -R nestjs:nodejs /app && \
    chown nestjs:nodejs /wait-for-it.sh && \
    chmod +x /wait-for-it.sh

# Switch to non-root user
USER nestjs

# Set environment variables for security and performance
ENV NODE_ENV=production \
    NODE_PATH=/app/node_modules \
    NODE_OPTIONS="--max-old-space-size=512" \
    NPM_CONFIG_CACHE=/tmp/.npm \
    NPM_CONFIG_UPDATE_NOTIFIER=false

# Security: Disable new privileges and set security options
# These will be enforced by the container runtime
ENV SECURITY_NON_ROOT=true \
    SECURITY_NO_NEW_PRIVILEGES=true

# Add comprehensive health check
HEALTHCHECK --interval=15s --timeout=5s --start-period=10s --retries=3 \
  CMD curl -f http://localhost:8000/health || exit 1

# Expose ports
EXPOSE 8000 8001

# Use tini as init system for proper signal handling
ENTRYPOINT ["/sbin/tini", "--"]

# Production command with migrations and graceful shutdown
CMD ["/wait-for-it.sh", "db:5432", "--timeout=60", "--", "sh", "-c", "npx prisma migrate deploy && node dist/main"]
