# Docker Compose Override for Production Security
# Use with: docker-compose -f docker-compose.yml -f docker-compose.security.yml up

version: '3.8'

services:
  backend:
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    read_only: false  # Set to true after testing volume mounts
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/tmp:noexec,nosuid,size=50m
    user: "1001:1001"
    
    # Resource limits for security
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    
    # Security labels
    labels:
      - "security.scan.enabled=true"
      - "security.non-root=true"
      - "security.hardened=true"
    
    # Network security
    networks:
      - backend-network
    
    # Health check override for security
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s

  frontend:
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    read_only: false  # Set to true after testing
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/tmp:noexec,nosuid,size=50m
    user: "1001:1001"
    
    # Resource limits for security
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    
    # Security labels
    labels:
      - "security.scan.enabled=true"
      - "security.non-root=true" 
      - "security.hardened=true"
    
    # Network security
    networks:
      - frontend-network
      - backend-network
    
    # Health check override
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 20s

  postgres:
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
    read_only: false  # Database needs write access
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/tmp:noexec,nosuid,size=50m
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    
    # Security labels
    labels:
      - "security.database=true"
      - "security.encrypted=true"
    
    # Network isolation
    networks:
      - backend-network
    
    # Enhanced health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    read_only: false  # Redis needs write access for persistence
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    user: "999:999"  # Redis user
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    
    # Security labels
    labels:
      - "security.cache=true"
      - "security.non-root=true"
    
    # Network isolation
    networks:
      - backend-network
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s

# Network security configuration
networks:
  frontend-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
    labels:
      - "security.network.frontend=true"
  
  backend-network:
    driver: bridge
    internal: true  # No external access
    ipam:
      config:
        - subnet: 172.21.0.0/24
    labels:
      - "security.network.backend=true"
      - "security.network.internal=true"

# Volume security configuration
volumes:
  postgres_data:
    labels:
      - "security.volume.encrypted=true"
      - "security.volume.backup=daily"
  
  redis_data:
    labels:
      - "security.volume.cache=true"
